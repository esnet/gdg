package service

import (
	"context"
	"errors"
	"log/slog"
	"os"
	"path/filepath"

	"gocloud.dev/blob"
	"gocloud.dev/blob/fileblob"
)

// LocalStorage default storage engine
type LocalStorage struct {
	ctx context.Context
}

// ReadFile returns a byte array of file content
func (s *LocalStorage) ReadFile(filename string) ([]byte, error) {
	mb, err := s.getBucket(filepath.Dir(filename))
	if err != nil {
		return nil, err
	}
	f := filepath.Base(filename)
	data, err := mb.ReadAll(s.ctx, f)
	if err != nil || len(data) == 0 {
		return nil, errors.New("unable to read file")
	}
	return data, nil
}

func (s *LocalStorage) getBucket(baseFolder string) (*blob.Bucket, error) {
	if _, err := os.Stat(baseFolder); err != nil {
		_ = os.Mkdir(baseFolder, 0750)
	}
	opts := fileblob.Options{
		NoTempDir: true,
	}
	return fileblob.OpenBucket(baseFolder, &opts)
}

// WriteFile writes file to disk and returns an error if operation failed
func (s *LocalStorage) WriteFile(filename string, data []byte) error {
	mb, err := s.getBucket(filepath.Dir(filename))
	if err != nil {
		return err
	}
	f := filepath.Base(filename)
	err = mb.WriteAll(s.ctx, f, data, nil)
	if err == nil {
		//Remove attribute file being generated by local storage
		attrFile := filename + ".attrs"
		slog.Debug("Removing file", "file", attrFile)
		defer os.Remove(attrFile)

	}
	return err
}

func (s *LocalStorage) Name() string {
	return "LocalStorage"
}

func (s *LocalStorage) FindAllFiles(folder string, fullPath bool) ([]string, error) {
	mb, err := s.getBucket(folder)
	if err != nil {
		return nil, err
	}

	var fileList []string
	iterator := mb.List(nil)
	for {
		obj, err := iterator.Next(s.ctx)
		if err != nil {
			break
		}
		if fullPath {
			fileList = append(fileList, filepath.Join(folder, obj.Key))
		} else {
			fileList = append(fileList, filepath.Base(obj.Key))
		}
	}

	return fileList, nil
}

func NewLocalStorage(ctx context.Context) Storage {
	return &LocalStorage{ctx: ctx}
}
