// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	models "github.com/esnet/grafana-swagger-api-golang/goclient/models"
	mock "github.com/stretchr/testify/mock"
)

// TokenApi is an autogenerated mock type for the TokenApi type
type TokenApi struct {
	mock.Mock
}

// CreateAPIKey provides a mock function with given fields: name, role, expiration
func (_m *TokenApi) CreateAPIKey(name string, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllTokens provides a mock function with given fields:
func (_m *TokenApi) DeleteAllTokens() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListAPIKeys provides a mock function with given fields:
func (_m *TokenApi) ListAPIKeys() []*models.APIKeyDTO {
	ret := _m.Called()

	var r0 []*models.APIKeyDTO
	if rf, ok := ret.Get(0).(func() []*models.APIKeyDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.APIKeyDTO)
		}
	}

	return r0
}

// NewTokenApi creates a new instance of TokenApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenApi {
	mock := &TokenApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
