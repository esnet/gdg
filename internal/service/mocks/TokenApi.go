// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// TokenApi is an autogenerated mock type for the TokenApi type
type TokenApi struct {
	mock.Mock
}

type TokenApi_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenApi) EXPECT() *TokenApi_Expecter {
	return &TokenApi_Expecter{mock: &_m.Mock}
}

// CreateAPIKey provides a mock function with given fields: name, role, expiration
func (_m *TokenApi) CreateAPIKey(name string, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenApi_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type TokenApi_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - name string
//   - role string
//   - expiration int64
func (_e *TokenApi_Expecter) CreateAPIKey(name interface{}, role interface{}, expiration interface{}) *TokenApi_CreateAPIKey_Call {
	return &TokenApi_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", name, role, expiration)}
}

func (_c *TokenApi_CreateAPIKey_Call) Run(run func(name string, role string, expiration int64)) *TokenApi_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *TokenApi_CreateAPIKey_Call) Return(_a0 *models.NewAPIKeyResult, _a1 error) *TokenApi_CreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenApi_CreateAPIKey_Call) RunAndReturn(run func(string, string, int64) (*models.NewAPIKeyResult, error)) *TokenApi_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllTokens provides a mock function with given fields:
func (_m *TokenApi) DeleteAllTokens() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// TokenApi_DeleteAllTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllTokens'
type TokenApi_DeleteAllTokens_Call struct {
	*mock.Call
}

// DeleteAllTokens is a helper method to define mock.On call
func (_e *TokenApi_Expecter) DeleteAllTokens() *TokenApi_DeleteAllTokens_Call {
	return &TokenApi_DeleteAllTokens_Call{Call: _e.mock.On("DeleteAllTokens")}
}

func (_c *TokenApi_DeleteAllTokens_Call) Run(run func()) *TokenApi_DeleteAllTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenApi_DeleteAllTokens_Call) Return(_a0 []string) *TokenApi_DeleteAllTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenApi_DeleteAllTokens_Call) RunAndReturn(run func() []string) *TokenApi_DeleteAllTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListAPIKeys provides a mock function with given fields:
func (_m *TokenApi) ListAPIKeys() []*models.APIKeyDTO {
	ret := _m.Called()

	var r0 []*models.APIKeyDTO
	if rf, ok := ret.Get(0).(func() []*models.APIKeyDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.APIKeyDTO)
		}
	}

	return r0
}

// TokenApi_ListAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAPIKeys'
type TokenApi_ListAPIKeys_Call struct {
	*mock.Call
}

// ListAPIKeys is a helper method to define mock.On call
func (_e *TokenApi_Expecter) ListAPIKeys() *TokenApi_ListAPIKeys_Call {
	return &TokenApi_ListAPIKeys_Call{Call: _e.mock.On("ListAPIKeys")}
}

func (_c *TokenApi_ListAPIKeys_Call) Run(run func()) *TokenApi_ListAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TokenApi_ListAPIKeys_Call) Return(_a0 []*models.APIKeyDTO) *TokenApi_ListAPIKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TokenApi_ListAPIKeys_Call) RunAndReturn(run func() []*models.APIKeyDTO) *TokenApi_ListAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenApi creates a new instance of TokenApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenApi {
	mock := &TokenApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
