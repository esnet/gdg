// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/safaci2000/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAlertContactPoints creates a new instance of AlertContactPoints. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertContactPoints(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertContactPoints {
	mock := &AlertContactPoints{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AlertContactPoints is an autogenerated mock type for the AlertContactPoints type
type AlertContactPoints struct {
	mock.Mock
}

type AlertContactPoints_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertContactPoints) EXPECT() *AlertContactPoints_Expecter {
	return &AlertContactPoints_Expecter{mock: &_m.Mock}
}

// ClearContactPoints provides a mock function for the type AlertContactPoints
func (_mock *AlertContactPoints) ClearContactPoints() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearContactPoints")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertContactPoints_ClearContactPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearContactPoints'
type AlertContactPoints_ClearContactPoints_Call struct {
	*mock.Call
}

// ClearContactPoints is a helper method to define mock.On call
func (_e *AlertContactPoints_Expecter) ClearContactPoints() *AlertContactPoints_ClearContactPoints_Call {
	return &AlertContactPoints_ClearContactPoints_Call{Call: _e.mock.On("ClearContactPoints")}
}

func (_c *AlertContactPoints_ClearContactPoints_Call) Run(run func()) *AlertContactPoints_ClearContactPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertContactPoints_ClearContactPoints_Call) Return(strings []string, err error) *AlertContactPoints_ClearContactPoints_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AlertContactPoints_ClearContactPoints_Call) RunAndReturn(run func() ([]string, error)) *AlertContactPoints_ClearContactPoints_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadContactPoints provides a mock function for the type AlertContactPoints
func (_mock *AlertContactPoints) DownloadContactPoints() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadContactPoints")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertContactPoints_DownloadContactPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadContactPoints'
type AlertContactPoints_DownloadContactPoints_Call struct {
	*mock.Call
}

// DownloadContactPoints is a helper method to define mock.On call
func (_e *AlertContactPoints_Expecter) DownloadContactPoints() *AlertContactPoints_DownloadContactPoints_Call {
	return &AlertContactPoints_DownloadContactPoints_Call{Call: _e.mock.On("DownloadContactPoints")}
}

func (_c *AlertContactPoints_DownloadContactPoints_Call) Run(run func()) *AlertContactPoints_DownloadContactPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertContactPoints_DownloadContactPoints_Call) Return(s string, err error) *AlertContactPoints_DownloadContactPoints_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AlertContactPoints_DownloadContactPoints_Call) RunAndReturn(run func() (string, error)) *AlertContactPoints_DownloadContactPoints_Call {
	_c.Call.Return(run)
	return _c
}

// ListContactPoints provides a mock function for the type AlertContactPoints
func (_mock *AlertContactPoints) ListContactPoints() ([]*models.EmbeddedContactPoint, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListContactPoints")
	}

	var r0 []*models.EmbeddedContactPoint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*models.EmbeddedContactPoint, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*models.EmbeddedContactPoint); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.EmbeddedContactPoint)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertContactPoints_ListContactPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListContactPoints'
type AlertContactPoints_ListContactPoints_Call struct {
	*mock.Call
}

// ListContactPoints is a helper method to define mock.On call
func (_e *AlertContactPoints_Expecter) ListContactPoints() *AlertContactPoints_ListContactPoints_Call {
	return &AlertContactPoints_ListContactPoints_Call{Call: _e.mock.On("ListContactPoints")}
}

func (_c *AlertContactPoints_ListContactPoints_Call) Run(run func()) *AlertContactPoints_ListContactPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertContactPoints_ListContactPoints_Call) Return(embeddedContactPoints []*models.EmbeddedContactPoint, err error) *AlertContactPoints_ListContactPoints_Call {
	_c.Call.Return(embeddedContactPoints, err)
	return _c
}

func (_c *AlertContactPoints_ListContactPoints_Call) RunAndReturn(run func() ([]*models.EmbeddedContactPoint, error)) *AlertContactPoints_ListContactPoints_Call {
	_c.Call.Return(run)
	return _c
}

// UploadContactPoints provides a mock function for the type AlertContactPoints
func (_mock *AlertContactPoints) UploadContactPoints() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadContactPoints")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertContactPoints_UploadContactPoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadContactPoints'
type AlertContactPoints_UploadContactPoints_Call struct {
	*mock.Call
}

// UploadContactPoints is a helper method to define mock.On call
func (_e *AlertContactPoints_Expecter) UploadContactPoints() *AlertContactPoints_UploadContactPoints_Call {
	return &AlertContactPoints_UploadContactPoints_Call{Call: _e.mock.On("UploadContactPoints")}
}

func (_c *AlertContactPoints_UploadContactPoints_Call) Run(run func()) *AlertContactPoints_UploadContactPoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertContactPoints_UploadContactPoints_Call) Return(strings []string, err error) *AlertContactPoints_UploadContactPoints_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AlertContactPoints_UploadContactPoints_Call) RunAndReturn(run func() ([]string, error)) *AlertContactPoints_UploadContactPoints_Call {
	_c.Call.Return(run)
	return _c
}
