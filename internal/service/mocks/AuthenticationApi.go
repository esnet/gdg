// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/esnet/gdg/internal/service/domain"
	"github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthenticationApi creates a new instance of AuthenticationApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationApi {
	mock := &AuthenticationApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthenticationApi is an autogenerated mock type for the AuthenticationApi type
type AuthenticationApi struct {
	mock.Mock
}

type AuthenticationApi_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationApi) EXPECT() *AuthenticationApi_Expecter {
	return &AuthenticationApi_Expecter{mock: &_m.Mock}
}

// CreateServiceAccount provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) CreateServiceAccount(name string, role string, expiration int64) (*models.ServiceAccountDTO, error) {
	ret := _mock.Called(name, role, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *models.ServiceAccountDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int64) (*models.ServiceAccountDTO, error)); ok {
		return returnFunc(name, role, expiration)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, int64) *models.ServiceAccountDTO); ok {
		r0 = returnFunc(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccountDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = returnFunc(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthenticationApi_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type AuthenticationApi_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - name string
//   - role string
//   - expiration int64
func (_e *AuthenticationApi_Expecter) CreateServiceAccount(name interface{}, role interface{}, expiration interface{}) *AuthenticationApi_CreateServiceAccount_Call {
	return &AuthenticationApi_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", name, role, expiration)}
}

func (_c *AuthenticationApi_CreateServiceAccount_Call) Run(run func(name string, role string, expiration int64)) *AuthenticationApi_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AuthenticationApi_CreateServiceAccount_Call) Return(serviceAccountDTO *models.ServiceAccountDTO, err error) *AuthenticationApi_CreateServiceAccount_Call {
	_c.Call.Return(serviceAccountDTO, err)
	return _c
}

func (_c *AuthenticationApi_CreateServiceAccount_Call) RunAndReturn(run func(name string, role string, expiration int64) (*models.ServiceAccountDTO, error)) *AuthenticationApi_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountToken provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) CreateServiceAccountToken(serviceAccountId int64, name string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _mock.Called(serviceAccountId, name, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountToken")
	}

	var r0 *models.NewAPIKeyResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return returnFunc(serviceAccountId, name, expiration)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, string, int64) *models.NewAPIKeyResult); ok {
		r0 = returnFunc(serviceAccountId, name, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64, string, int64) error); ok {
		r1 = returnFunc(serviceAccountId, name, expiration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthenticationApi_CreateServiceAccountToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountToken'
type AuthenticationApi_CreateServiceAccountToken_Call struct {
	*mock.Call
}

// CreateServiceAccountToken is a helper method to define mock.On call
//   - serviceAccountId int64
//   - name string
//   - expiration int64
func (_e *AuthenticationApi_Expecter) CreateServiceAccountToken(serviceAccountId interface{}, name interface{}, expiration interface{}) *AuthenticationApi_CreateServiceAccountToken_Call {
	return &AuthenticationApi_CreateServiceAccountToken_Call{Call: _e.mock.On("CreateServiceAccountToken", serviceAccountId, name, expiration)}
}

func (_c *AuthenticationApi_CreateServiceAccountToken_Call) Run(run func(serviceAccountId int64, name string, expiration int64)) *AuthenticationApi_CreateServiceAccountToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AuthenticationApi_CreateServiceAccountToken_Call) Return(newAPIKeyResult *models.NewAPIKeyResult, err error) *AuthenticationApi_CreateServiceAccountToken_Call {
	_c.Call.Return(newAPIKeyResult, err)
	return _c
}

func (_c *AuthenticationApi_CreateServiceAccountToken_Call) RunAndReturn(run func(serviceAccountId int64, name string, expiration int64) (*models.NewAPIKeyResult, error)) *AuthenticationApi_CreateServiceAccountToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllServiceAccounts provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) DeleteAllServiceAccounts() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllServiceAccounts")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// AuthenticationApi_DeleteAllServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllServiceAccounts'
type AuthenticationApi_DeleteAllServiceAccounts_Call struct {
	*mock.Call
}

// DeleteAllServiceAccounts is a helper method to define mock.On call
func (_e *AuthenticationApi_Expecter) DeleteAllServiceAccounts() *AuthenticationApi_DeleteAllServiceAccounts_Call {
	return &AuthenticationApi_DeleteAllServiceAccounts_Call{Call: _e.mock.On("DeleteAllServiceAccounts")}
}

func (_c *AuthenticationApi_DeleteAllServiceAccounts_Call) Run(run func()) *AuthenticationApi_DeleteAllServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationApi_DeleteAllServiceAccounts_Call) Return(strings []string) *AuthenticationApi_DeleteAllServiceAccounts_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *AuthenticationApi_DeleteAllServiceAccounts_Call) RunAndReturn(run func() []string) *AuthenticationApi_DeleteAllServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccount provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) DeleteServiceAccount(accountId int64) error {
	ret := _mock.Called(accountId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(accountId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AuthenticationApi_DeleteServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccount'
type AuthenticationApi_DeleteServiceAccount_Call struct {
	*mock.Call
}

// DeleteServiceAccount is a helper method to define mock.On call
//   - accountId int64
func (_e *AuthenticationApi_Expecter) DeleteServiceAccount(accountId interface{}) *AuthenticationApi_DeleteServiceAccount_Call {
	return &AuthenticationApi_DeleteServiceAccount_Call{Call: _e.mock.On("DeleteServiceAccount", accountId)}
}

func (_c *AuthenticationApi_DeleteServiceAccount_Call) Run(run func(accountId int64)) *AuthenticationApi_DeleteServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthenticationApi_DeleteServiceAccount_Call) Return(err error) *AuthenticationApi_DeleteServiceAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AuthenticationApi_DeleteServiceAccount_Call) RunAndReturn(run func(accountId int64) error) *AuthenticationApi_DeleteServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountTokens provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) DeleteServiceAccountTokens(serviceId int64) []string {
	ret := _mock.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountTokens")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = returnFunc(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// AuthenticationApi_DeleteServiceAccountTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountTokens'
type AuthenticationApi_DeleteServiceAccountTokens_Call struct {
	*mock.Call
}

// DeleteServiceAccountTokens is a helper method to define mock.On call
//   - serviceId int64
func (_e *AuthenticationApi_Expecter) DeleteServiceAccountTokens(serviceId interface{}) *AuthenticationApi_DeleteServiceAccountTokens_Call {
	return &AuthenticationApi_DeleteServiceAccountTokens_Call{Call: _e.mock.On("DeleteServiceAccountTokens", serviceId)}
}

func (_c *AuthenticationApi_DeleteServiceAccountTokens_Call) Run(run func(serviceId int64)) *AuthenticationApi_DeleteServiceAccountTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthenticationApi_DeleteServiceAccountTokens_Call) Return(strings []string) *AuthenticationApi_DeleteServiceAccountTokens_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *AuthenticationApi_DeleteServiceAccountTokens_Call) RunAndReturn(run func(serviceId int64) []string) *AuthenticationApi_DeleteServiceAccountTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccounts provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) ListServiceAccounts() []*domain.ServiceAccountDTOWithTokens {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccounts")
	}

	var r0 []*domain.ServiceAccountDTOWithTokens
	if returnFunc, ok := ret.Get(0).(func() []*domain.ServiceAccountDTOWithTokens); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceAccountDTOWithTokens)
		}
	}
	return r0
}

// AuthenticationApi_ListServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccounts'
type AuthenticationApi_ListServiceAccounts_Call struct {
	*mock.Call
}

// ListServiceAccounts is a helper method to define mock.On call
func (_e *AuthenticationApi_Expecter) ListServiceAccounts() *AuthenticationApi_ListServiceAccounts_Call {
	return &AuthenticationApi_ListServiceAccounts_Call{Call: _e.mock.On("ListServiceAccounts")}
}

func (_c *AuthenticationApi_ListServiceAccounts_Call) Run(run func()) *AuthenticationApi_ListServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationApi_ListServiceAccounts_Call) Return(serviceAccountDTOWithTokenss []*domain.ServiceAccountDTOWithTokens) *AuthenticationApi_ListServiceAccounts_Call {
	_c.Call.Return(serviceAccountDTOWithTokenss)
	return _c
}

func (_c *AuthenticationApi_ListServiceAccounts_Call) RunAndReturn(run func() []*domain.ServiceAccountDTOWithTokens) *AuthenticationApi_ListServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsTokens provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) ListServiceAccountsTokens(id int64) ([]*models.TokenDTO, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsTokens")
	}

	var r0 []*models.TokenDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) ([]*models.TokenDTO, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) []*models.TokenDTO); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TokenDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AuthenticationApi_ListServiceAccountsTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsTokens'
type AuthenticationApi_ListServiceAccountsTokens_Call struct {
	*mock.Call
}

// ListServiceAccountsTokens is a helper method to define mock.On call
//   - id int64
func (_e *AuthenticationApi_Expecter) ListServiceAccountsTokens(id interface{}) *AuthenticationApi_ListServiceAccountsTokens_Call {
	return &AuthenticationApi_ListServiceAccountsTokens_Call{Call: _e.mock.On("ListServiceAccountsTokens", id)}
}

func (_c *AuthenticationApi_ListServiceAccountsTokens_Call) Run(run func(id int64)) *AuthenticationApi_ListServiceAccountsTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthenticationApi_ListServiceAccountsTokens_Call) Return(tokenDTOs []*models.TokenDTO, err error) *AuthenticationApi_ListServiceAccountsTokens_Call {
	_c.Call.Return(tokenDTOs, err)
	return _c
}

func (_c *AuthenticationApi_ListServiceAccountsTokens_Call) RunAndReturn(run func(id int64) ([]*models.TokenDTO, error)) *AuthenticationApi_ListServiceAccountsTokens_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type AuthenticationApi
func (_mock *AuthenticationApi) Login() {
	_mock.Called()
	return
}

// AuthenticationApi_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthenticationApi_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
func (_e *AuthenticationApi_Expecter) Login() *AuthenticationApi_Login_Call {
	return &AuthenticationApi_Login_Call{Call: _e.mock.On("Login")}
}

func (_c *AuthenticationApi_Login_Call) Run(run func()) *AuthenticationApi_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthenticationApi_Login_Call) Return() *AuthenticationApi_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthenticationApi_Login_Call) RunAndReturn(run func()) *AuthenticationApi_Login_Call {
	_c.Run(run)
	return _c
}
