// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/safaci2000/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAlertTemplates creates a new instance of AlertTemplates. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertTemplates(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertTemplates {
	mock := &AlertTemplates{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AlertTemplates is an autogenerated mock type for the AlertTemplates type
type AlertTemplates struct {
	mock.Mock
}

type AlertTemplates_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertTemplates) EXPECT() *AlertTemplates_Expecter {
	return &AlertTemplates_Expecter{mock: &_m.Mock}
}

// ClearAlertTemplates provides a mock function for the type AlertTemplates
func (_mock *AlertTemplates) ClearAlertTemplates() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearAlertTemplates")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertTemplates_ClearAlertTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAlertTemplates'
type AlertTemplates_ClearAlertTemplates_Call struct {
	*mock.Call
}

// ClearAlertTemplates is a helper method to define mock.On call
func (_e *AlertTemplates_Expecter) ClearAlertTemplates() *AlertTemplates_ClearAlertTemplates_Call {
	return &AlertTemplates_ClearAlertTemplates_Call{Call: _e.mock.On("ClearAlertTemplates")}
}

func (_c *AlertTemplates_ClearAlertTemplates_Call) Run(run func()) *AlertTemplates_ClearAlertTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertTemplates_ClearAlertTemplates_Call) Return(strings []string, err error) *AlertTemplates_ClearAlertTemplates_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AlertTemplates_ClearAlertTemplates_Call) RunAndReturn(run func() ([]string, error)) *AlertTemplates_ClearAlertTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAlertTemplates provides a mock function for the type AlertTemplates
func (_mock *AlertTemplates) DownloadAlertTemplates() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadAlertTemplates")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertTemplates_DownloadAlertTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAlertTemplates'
type AlertTemplates_DownloadAlertTemplates_Call struct {
	*mock.Call
}

// DownloadAlertTemplates is a helper method to define mock.On call
func (_e *AlertTemplates_Expecter) DownloadAlertTemplates() *AlertTemplates_DownloadAlertTemplates_Call {
	return &AlertTemplates_DownloadAlertTemplates_Call{Call: _e.mock.On("DownloadAlertTemplates")}
}

func (_c *AlertTemplates_DownloadAlertTemplates_Call) Run(run func()) *AlertTemplates_DownloadAlertTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertTemplates_DownloadAlertTemplates_Call) Return(s string, err error) *AlertTemplates_DownloadAlertTemplates_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AlertTemplates_DownloadAlertTemplates_Call) RunAndReturn(run func() (string, error)) *AlertTemplates_DownloadAlertTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertTemplates provides a mock function for the type AlertTemplates
func (_mock *AlertTemplates) ListAlertTemplates() ([]*models.NotificationTemplate, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAlertTemplates")
	}

	var r0 []*models.NotificationTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*models.NotificationTemplate, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*models.NotificationTemplate); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.NotificationTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertTemplates_ListAlertTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertTemplates'
type AlertTemplates_ListAlertTemplates_Call struct {
	*mock.Call
}

// ListAlertTemplates is a helper method to define mock.On call
func (_e *AlertTemplates_Expecter) ListAlertTemplates() *AlertTemplates_ListAlertTemplates_Call {
	return &AlertTemplates_ListAlertTemplates_Call{Call: _e.mock.On("ListAlertTemplates")}
}

func (_c *AlertTemplates_ListAlertTemplates_Call) Run(run func()) *AlertTemplates_ListAlertTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertTemplates_ListAlertTemplates_Call) Return(notificationTemplates []*models.NotificationTemplate, err error) *AlertTemplates_ListAlertTemplates_Call {
	_c.Call.Return(notificationTemplates, err)
	return _c
}

func (_c *AlertTemplates_ListAlertTemplates_Call) RunAndReturn(run func() ([]*models.NotificationTemplate, error)) *AlertTemplates_ListAlertTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAlertTemplates provides a mock function for the type AlertTemplates
func (_mock *AlertTemplates) UploadAlertTemplates() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadAlertTemplates")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertTemplates_UploadAlertTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAlertTemplates'
type AlertTemplates_UploadAlertTemplates_Call struct {
	*mock.Call
}

// UploadAlertTemplates is a helper method to define mock.On call
func (_e *AlertTemplates_Expecter) UploadAlertTemplates() *AlertTemplates_UploadAlertTemplates_Call {
	return &AlertTemplates_UploadAlertTemplates_Call{Call: _e.mock.On("UploadAlertTemplates")}
}

func (_c *AlertTemplates_UploadAlertTemplates_Call) Run(run func()) *AlertTemplates_UploadAlertTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertTemplates_UploadAlertTemplates_Call) Return(strings []string, err error) *AlertTemplates_UploadAlertTemplates_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AlertTemplates_UploadAlertTemplates_Call) RunAndReturn(run func() ([]string, error)) *AlertTemplates_UploadAlertTemplates_Call {
	_c.Call.Return(run)
	return _c
}
