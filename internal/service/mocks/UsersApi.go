// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/esnet/gdg/internal/service/filters"
	"github.com/esnet/gdg/internal/types"
	"github.com/safaci2000/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewUsersApi creates a new instance of UsersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersApi {
	mock := &UsersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsersApi is an autogenerated mock type for the UsersApi type
type UsersApi struct {
	mock.Mock
}

type UsersApi_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersApi) EXPECT() *UsersApi_Expecter {
	return &UsersApi_Expecter{mock: &_m.Mock}
}

// DeleteAllUsers provides a mock function for the type UsersApi
func (_mock *UsersApi) DeleteAllUsers(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUsers")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// UsersApi_DeleteAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllUsers'
type UsersApi_DeleteAllUsers_Call struct {
	*mock.Call
}

// DeleteAllUsers is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *UsersApi_Expecter) DeleteAllUsers(filter interface{}) *UsersApi_DeleteAllUsers_Call {
	return &UsersApi_DeleteAllUsers_Call{Call: _e.mock.On("DeleteAllUsers", filter)}
}

func (_c *UsersApi_DeleteAllUsers_Call) Run(run func(filter filters.V2Filter)) *UsersApi_DeleteAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsersApi_DeleteAllUsers_Call) Return(strings []string) *UsersApi_DeleteAllUsers_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *UsersApi_DeleteAllUsers_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *UsersApi_DeleteAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadUsers provides a mock function for the type UsersApi
func (_mock *UsersApi) DownloadUsers(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadUsers")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// UsersApi_DownloadUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadUsers'
type UsersApi_DownloadUsers_Call struct {
	*mock.Call
}

// DownloadUsers is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *UsersApi_Expecter) DownloadUsers(filter interface{}) *UsersApi_DownloadUsers_Call {
	return &UsersApi_DownloadUsers_Call{Call: _e.mock.On("DownloadUsers", filter)}
}

func (_c *UsersApi_DownloadUsers_Call) Run(run func(filter filters.V2Filter)) *UsersApi_DownloadUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsersApi_DownloadUsers_Call) Return(strings []string) *UsersApi_DownloadUsers_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *UsersApi_DownloadUsers_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *UsersApi_DownloadUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function for the type UsersApi
func (_mock *UsersApi) GetUserInfo() (*models.UserProfileDTO, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *models.UserProfileDTO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.UserProfileDTO, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.UserProfileDTO); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserProfileDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsersApi_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type UsersApi_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
func (_e *UsersApi_Expecter) GetUserInfo() *UsersApi_GetUserInfo_Call {
	return &UsersApi_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo")}
}

func (_c *UsersApi_GetUserInfo_Call) Run(run func()) *UsersApi_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UsersApi_GetUserInfo_Call) Return(userProfileDTO *models.UserProfileDTO, err error) *UsersApi_GetUserInfo_Call {
	_c.Call.Return(userProfileDTO, err)
	return _c
}

func (_c *UsersApi_GetUserInfo_Call) RunAndReturn(run func() (*models.UserProfileDTO, error)) *UsersApi_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type UsersApi
func (_mock *UsersApi) ListUsers(filter filters.V2Filter) []*models.UserSearchHitDTO {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*models.UserSearchHitDTO
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []*models.UserSearchHitDTO); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserSearchHitDTO)
		}
	}
	return r0
}

// UsersApi_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UsersApi_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *UsersApi_Expecter) ListUsers(filter interface{}) *UsersApi_ListUsers_Call {
	return &UsersApi_ListUsers_Call{Call: _e.mock.On("ListUsers", filter)}
}

func (_c *UsersApi_ListUsers_Call) Run(run func(filter filters.V2Filter)) *UsersApi_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsersApi_ListUsers_Call) Return(userSearchHitDTOs []*models.UserSearchHitDTO) *UsersApi_ListUsers_Call {
	_c.Call.Return(userSearchHitDTOs)
	return _c
}

func (_c *UsersApi_ListUsers_Call) RunAndReturn(run func(filter filters.V2Filter) []*models.UserSearchHitDTO) *UsersApi_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteUser provides a mock function for the type UsersApi
func (_mock *UsersApi) PromoteUser(userLogin string) (string, error) {
	ret := _mock.Called(userLogin)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(userLogin)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(userLogin)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userLogin)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsersApi_PromoteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteUser'
type UsersApi_PromoteUser_Call struct {
	*mock.Call
}

// PromoteUser is a helper method to define mock.On call
//   - userLogin string
func (_e *UsersApi_Expecter) PromoteUser(userLogin interface{}) *UsersApi_PromoteUser_Call {
	return &UsersApi_PromoteUser_Call{Call: _e.mock.On("PromoteUser", userLogin)}
}

func (_c *UsersApi_PromoteUser_Call) Run(run func(userLogin string)) *UsersApi_PromoteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsersApi_PromoteUser_Call) Return(s string, err error) *UsersApi_PromoteUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *UsersApi_PromoteUser_Call) RunAndReturn(run func(userLogin string) (string, error)) *UsersApi_PromoteUser_Call {
	_c.Call.Return(run)
	return _c
}

// UploadUsers provides a mock function for the type UsersApi
func (_mock *UsersApi) UploadUsers(filter filters.V2Filter) []types.UserProfileWithAuth {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadUsers")
	}

	var r0 []types.UserProfileWithAuth
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []types.UserProfileWithAuth); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UserProfileWithAuth)
		}
	}
	return r0
}

// UsersApi_UploadUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadUsers'
type UsersApi_UploadUsers_Call struct {
	*mock.Call
}

// UploadUsers is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *UsersApi_Expecter) UploadUsers(filter interface{}) *UsersApi_UploadUsers_Call {
	return &UsersApi_UploadUsers_Call{Call: _e.mock.On("UploadUsers", filter)}
}

func (_c *UsersApi_UploadUsers_Call) Run(run func(filter filters.V2Filter)) *UsersApi_UploadUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsersApi_UploadUsers_Call) Return(userProfileWithAuths []types.UserProfileWithAuth) *UsersApi_UploadUsers_Call {
	_c.Call.Return(userProfileWithAuths)
	return _c
}

func (_c *UsersApi_UploadUsers_Call) RunAndReturn(run func(filter filters.V2Filter) []types.UserProfileWithAuth) *UsersApi_UploadUsers_Call {
	_c.Call.Return(run)
	return _c
}
