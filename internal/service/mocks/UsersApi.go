// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	filters "github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"
)

// UsersApi is an autogenerated mock type for the UsersApi type
type UsersApi struct {
	mock.Mock
}

// DeleteAllUsers provides a mock function with given fields: filter
func (_m *UsersApi) DeleteAllUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadUsers provides a mock function with given fields: filter
func (_m *UsersApi) DownloadUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetUserInfo provides a mock function with given fields:
func (_m *UsersApi) GetUserInfo() (*models.UserProfileDTO, error) {
	ret := _m.Called()

	var r0 *models.UserProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.UserProfileDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.UserProfileDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: filter
func (_m *UsersApi) ListUsers(filter filters.Filter) []*models.UserSearchHitDTO {
	ret := _m.Called(filter)

	var r0 []*models.UserSearchHitDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.UserSearchHitDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserSearchHitDTO)
		}
	}

	return r0
}

// PromoteUser provides a mock function with given fields: userLogin
func (_m *UsersApi) PromoteUser(userLogin string) (string, error) {
	ret := _m.Called(userLogin)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userLogin)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userLogin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadUsers provides a mock function with given fields: filter
func (_m *UsersApi) UploadUsers(filter filters.Filter) []models.UserProfileDTO {
	ret := _m.Called(filter)

	var r0 []models.UserProfileDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []models.UserProfileDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserProfileDTO)
		}
	}

	return r0
}

// NewUsersApi creates a new instance of UsersApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersApi {
	mock := &UsersApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
