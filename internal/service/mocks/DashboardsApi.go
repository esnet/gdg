// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	types0 "github.com/esnet/gdg/internal/service/domain"
	"github.com/esnet/gdg/internal/service/filters"
	"github.com/esnet/gdg/internal/service/types"
	mock "github.com/stretchr/testify/mock"
)

// NewDashboardsApi creates a new instance of DashboardsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardsApi {
	mock := &DashboardsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DashboardsApi is an autogenerated mock type for the DashboardsApi type
type DashboardsApi struct {
	mock.Mock
}

type DashboardsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DashboardsApi) EXPECT() *DashboardsApi_Expecter {
	return &DashboardsApi_Expecter{mock: &_m.Mock}
}

// DeleteAllDashboards provides a mock function for the type DashboardsApi
func (_mock *DashboardsApi) DeleteAllDashboards(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllDashboards")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// DashboardsApi_DeleteAllDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllDashboards'
type DashboardsApi_DeleteAllDashboards_Call struct {
	*mock.Call
}

// DeleteAllDashboards is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *DashboardsApi_Expecter) DeleteAllDashboards(filter interface{}) *DashboardsApi_DeleteAllDashboards_Call {
	return &DashboardsApi_DeleteAllDashboards_Call{Call: _e.mock.On("DeleteAllDashboards", filter)}
}

func (_c *DashboardsApi_DeleteAllDashboards_Call) Run(run func(filter filters.V2Filter)) *DashboardsApi_DeleteAllDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardsApi_DeleteAllDashboards_Call) Return(strings []string) *DashboardsApi_DeleteAllDashboards_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *DashboardsApi_DeleteAllDashboards_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *DashboardsApi_DeleteAllDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadDashboards provides a mock function for the type DashboardsApi
func (_mock *DashboardsApi) DownloadDashboards(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDashboards")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// DashboardsApi_DownloadDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadDashboards'
type DashboardsApi_DownloadDashboards_Call struct {
	*mock.Call
}

// DownloadDashboards is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *DashboardsApi_Expecter) DownloadDashboards(filter interface{}) *DashboardsApi_DownloadDashboards_Call {
	return &DashboardsApi_DownloadDashboards_Call{Call: _e.mock.On("DownloadDashboards", filter)}
}

func (_c *DashboardsApi_DownloadDashboards_Call) Run(run func(filter filters.V2Filter)) *DashboardsApi_DownloadDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardsApi_DownloadDashboards_Call) Return(strings []string) *DashboardsApi_DownloadDashboards_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *DashboardsApi_DownloadDashboards_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *DashboardsApi_DownloadDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// LintDashboards provides a mock function for the type DashboardsApi
func (_mock *DashboardsApi) LintDashboards(req types.LintRequest) []string {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for LintDashboards")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(types.LintRequest) []string); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// DashboardsApi_LintDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LintDashboards'
type DashboardsApi_LintDashboards_Call struct {
	*mock.Call
}

// LintDashboards is a helper method to define mock.On call
//   - req types.LintRequest
func (_e *DashboardsApi_Expecter) LintDashboards(req interface{}) *DashboardsApi_LintDashboards_Call {
	return &DashboardsApi_LintDashboards_Call{Call: _e.mock.On("LintDashboards", req)}
}

func (_c *DashboardsApi_LintDashboards_Call) Run(run func(req types.LintRequest)) *DashboardsApi_LintDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 types.LintRequest
		if args[0] != nil {
			arg0 = args[0].(types.LintRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardsApi_LintDashboards_Call) Return(strings []string) *DashboardsApi_LintDashboards_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *DashboardsApi_LintDashboards_Call) RunAndReturn(run func(req types.LintRequest) []string) *DashboardsApi_LintDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// ListDashboards provides a mock function for the type DashboardsApi
func (_mock *DashboardsApi) ListDashboards(filter filters.V2Filter) []*types0.NestedHit {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboards")
	}

	var r0 []*types0.NestedHit
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []*types0.NestedHit); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types0.NestedHit)
		}
	}
	return r0
}

// DashboardsApi_ListDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDashboards'
type DashboardsApi_ListDashboards_Call struct {
	*mock.Call
}

// ListDashboards is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *DashboardsApi_Expecter) ListDashboards(filter interface{}) *DashboardsApi_ListDashboards_Call {
	return &DashboardsApi_ListDashboards_Call{Call: _e.mock.On("ListDashboards", filter)}
}

func (_c *DashboardsApi_ListDashboards_Call) Run(run func(filter filters.V2Filter)) *DashboardsApi_ListDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardsApi_ListDashboards_Call) Return(nestedHits []*types0.NestedHit) *DashboardsApi_ListDashboards_Call {
	_c.Call.Return(nestedHits)
	return _c
}

func (_c *DashboardsApi_ListDashboards_Call) RunAndReturn(run func(filter filters.V2Filter) []*types0.NestedHit) *DashboardsApi_ListDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// UploadDashboards provides a mock function for the type DashboardsApi
func (_mock *DashboardsApi) UploadDashboards(filterReq filters.V2Filter) ([]string, error) {
	ret := _mock.Called(filterReq)

	if len(ret) == 0 {
		panic("no return value specified for UploadDashboards")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) ([]string, error)); ok {
		return returnFunc(filterReq)
	}
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filterReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(filters.V2Filter) error); ok {
		r1 = returnFunc(filterReq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DashboardsApi_UploadDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDashboards'
type DashboardsApi_UploadDashboards_Call struct {
	*mock.Call
}

// UploadDashboards is a helper method to define mock.On call
//   - filterReq filters.V2Filter
func (_e *DashboardsApi_Expecter) UploadDashboards(filterReq interface{}) *DashboardsApi_UploadDashboards_Call {
	return &DashboardsApi_UploadDashboards_Call{Call: _e.mock.On("UploadDashboards", filterReq)}
}

func (_c *DashboardsApi_UploadDashboards_Call) Run(run func(filterReq filters.V2Filter)) *DashboardsApi_UploadDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardsApi_UploadDashboards_Call) Return(strings []string, err error) *DashboardsApi_UploadDashboards_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *DashboardsApi_UploadDashboards_Call) RunAndReturn(run func(filterReq filters.V2Filter) ([]string, error)) *DashboardsApi_UploadDashboards_Call {
	_c.Call.Return(run)
	return _c
}
