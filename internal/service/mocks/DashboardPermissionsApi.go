// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/esnet/gdg/internal/service/domain"
	"github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"
)

// NewDashboardPermissionsApi creates a new instance of DashboardPermissionsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardPermissionsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardPermissionsApi {
	mock := &DashboardPermissionsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DashboardPermissionsApi is an autogenerated mock type for the DashboardPermissionsApi type
type DashboardPermissionsApi struct {
	mock.Mock
}

type DashboardPermissionsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *DashboardPermissionsApi) EXPECT() *DashboardPermissionsApi_Expecter {
	return &DashboardPermissionsApi_Expecter{mock: &_m.Mock}
}

// ClearDashboardPermissions provides a mock function for the type DashboardPermissionsApi
func (_mock *DashboardPermissionsApi) ClearDashboardPermissions(filterReq filters.V2Filter) error {
	ret := _mock.Called(filterReq)

	if len(ret) == 0 {
		panic("no return value specified for ClearDashboardPermissions")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) error); ok {
		r0 = returnFunc(filterReq)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DashboardPermissionsApi_ClearDashboardPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearDashboardPermissions'
type DashboardPermissionsApi_ClearDashboardPermissions_Call struct {
	*mock.Call
}

// ClearDashboardPermissions is a helper method to define mock.On call
//   - filterReq filters.V2Filter
func (_e *DashboardPermissionsApi_Expecter) ClearDashboardPermissions(filterReq interface{}) *DashboardPermissionsApi_ClearDashboardPermissions_Call {
	return &DashboardPermissionsApi_ClearDashboardPermissions_Call{Call: _e.mock.On("ClearDashboardPermissions", filterReq)}
}

func (_c *DashboardPermissionsApi_ClearDashboardPermissions_Call) Run(run func(filterReq filters.V2Filter)) *DashboardPermissionsApi_ClearDashboardPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardPermissionsApi_ClearDashboardPermissions_Call) Return(err error) *DashboardPermissionsApi_ClearDashboardPermissions_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DashboardPermissionsApi_ClearDashboardPermissions_Call) RunAndReturn(run func(filterReq filters.V2Filter) error) *DashboardPermissionsApi_ClearDashboardPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadDashboardPermissions provides a mock function for the type DashboardPermissionsApi
func (_mock *DashboardPermissionsApi) DownloadDashboardPermissions(filterReq filters.V2Filter) ([]string, error) {
	ret := _mock.Called(filterReq)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDashboardPermissions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) ([]string, error)); ok {
		return returnFunc(filterReq)
	}
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filterReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(filters.V2Filter) error); ok {
		r1 = returnFunc(filterReq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DashboardPermissionsApi_DownloadDashboardPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadDashboardPermissions'
type DashboardPermissionsApi_DownloadDashboardPermissions_Call struct {
	*mock.Call
}

// DownloadDashboardPermissions is a helper method to define mock.On call
//   - filterReq filters.V2Filter
func (_e *DashboardPermissionsApi_Expecter) DownloadDashboardPermissions(filterReq interface{}) *DashboardPermissionsApi_DownloadDashboardPermissions_Call {
	return &DashboardPermissionsApi_DownloadDashboardPermissions_Call{Call: _e.mock.On("DownloadDashboardPermissions", filterReq)}
}

func (_c *DashboardPermissionsApi_DownloadDashboardPermissions_Call) Run(run func(filterReq filters.V2Filter)) *DashboardPermissionsApi_DownloadDashboardPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardPermissionsApi_DownloadDashboardPermissions_Call) Return(strings []string, err error) *DashboardPermissionsApi_DownloadDashboardPermissions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *DashboardPermissionsApi_DownloadDashboardPermissions_Call) RunAndReturn(run func(filterReq filters.V2Filter) ([]string, error)) *DashboardPermissionsApi_DownloadDashboardPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListDashboardPermissions provides a mock function for the type DashboardPermissionsApi
func (_mock *DashboardPermissionsApi) ListDashboardPermissions(filterReq filters.V2Filter) ([]domain.DashboardAndPermissions, error) {
	ret := _mock.Called(filterReq)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboardPermissions")
	}

	var r0 []domain.DashboardAndPermissions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) ([]domain.DashboardAndPermissions, error)); ok {
		return returnFunc(filterReq)
	}
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []domain.DashboardAndPermissions); ok {
		r0 = returnFunc(filterReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DashboardAndPermissions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(filters.V2Filter) error); ok {
		r1 = returnFunc(filterReq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DashboardPermissionsApi_ListDashboardPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDashboardPermissions'
type DashboardPermissionsApi_ListDashboardPermissions_Call struct {
	*mock.Call
}

// ListDashboardPermissions is a helper method to define mock.On call
//   - filterReq filters.V2Filter
func (_e *DashboardPermissionsApi_Expecter) ListDashboardPermissions(filterReq interface{}) *DashboardPermissionsApi_ListDashboardPermissions_Call {
	return &DashboardPermissionsApi_ListDashboardPermissions_Call{Call: _e.mock.On("ListDashboardPermissions", filterReq)}
}

func (_c *DashboardPermissionsApi_ListDashboardPermissions_Call) Run(run func(filterReq filters.V2Filter)) *DashboardPermissionsApi_ListDashboardPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardPermissionsApi_ListDashboardPermissions_Call) Return(dashboardAndPermissionss []domain.DashboardAndPermissions, err error) *DashboardPermissionsApi_ListDashboardPermissions_Call {
	_c.Call.Return(dashboardAndPermissionss, err)
	return _c
}

func (_c *DashboardPermissionsApi_ListDashboardPermissions_Call) RunAndReturn(run func(filterReq filters.V2Filter) ([]domain.DashboardAndPermissions, error)) *DashboardPermissionsApi_ListDashboardPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UploadDashboardPermissions provides a mock function for the type DashboardPermissionsApi
func (_mock *DashboardPermissionsApi) UploadDashboardPermissions(filterReq filters.V2Filter) ([]string, error) {
	ret := _mock.Called(filterReq)

	if len(ret) == 0 {
		panic("no return value specified for UploadDashboardPermissions")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) ([]string, error)); ok {
		return returnFunc(filterReq)
	}
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filterReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(filters.V2Filter) error); ok {
		r1 = returnFunc(filterReq)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DashboardPermissionsApi_UploadDashboardPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDashboardPermissions'
type DashboardPermissionsApi_UploadDashboardPermissions_Call struct {
	*mock.Call
}

// UploadDashboardPermissions is a helper method to define mock.On call
//   - filterReq filters.V2Filter
func (_e *DashboardPermissionsApi_Expecter) UploadDashboardPermissions(filterReq interface{}) *DashboardPermissionsApi_UploadDashboardPermissions_Call {
	return &DashboardPermissionsApi_UploadDashboardPermissions_Call{Call: _e.mock.On("UploadDashboardPermissions", filterReq)}
}

func (_c *DashboardPermissionsApi_UploadDashboardPermissions_Call) Run(run func(filterReq filters.V2Filter)) *DashboardPermissionsApi_UploadDashboardPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DashboardPermissionsApi_UploadDashboardPermissions_Call) Return(strings []string, err error) *DashboardPermissionsApi_UploadDashboardPermissions_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *DashboardPermissionsApi_UploadDashboardPermissions_Call) RunAndReturn(run func(filterReq filters.V2Filter) ([]string, error)) *DashboardPermissionsApi_UploadDashboardPermissions_Call {
	_c.Call.Return(run)
	return _c
}
