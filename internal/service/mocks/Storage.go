// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// FindAllFiles provides a mock function with given fields: folder, fullPath
func (_m *Storage) FindAllFiles(folder string, fullPath bool) ([]string, error) {
	ret := _m.Called(folder, fullPath)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) ([]string, error)); ok {
		return rf(folder, fullPath)
	}
	if rf, ok := ret.Get(0).(func(string, bool) []string); ok {
		r0 = rf(folder, fullPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(folder, fullPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_FindAllFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllFiles'
type Storage_FindAllFiles_Call struct {
	*mock.Call
}

// FindAllFiles is a helper method to define mock.On call
//   - folder string
//   - fullPath bool
func (_e *Storage_Expecter) FindAllFiles(folder interface{}, fullPath interface{}) *Storage_FindAllFiles_Call {
	return &Storage_FindAllFiles_Call{Call: _e.mock.On("FindAllFiles", folder, fullPath)}
}

func (_c *Storage_FindAllFiles_Call) Run(run func(folder string, fullPath bool)) *Storage_FindAllFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Storage_FindAllFiles_Call) Return(_a0 []string, _a1 error) *Storage_FindAllFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_FindAllFiles_Call) RunAndReturn(run func(string, bool) ([]string, error)) *Storage_FindAllFiles_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Storage) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Storage_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Storage_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Storage_Expecter) Name() *Storage_Name_Call {
	return &Storage_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Storage_Name_Call) Run(run func()) *Storage_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Name_Call) Return(_a0 string) *Storage_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Name_Call) RunAndReturn(run func() string) *Storage_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: filename
func (_m *Storage) ReadFile(filename string) ([]byte, error) {
	ret := _m.Called(filename)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filename)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type Storage_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - filename string
func (_e *Storage_Expecter) ReadFile(filename interface{}) *Storage_ReadFile_Call {
	return &Storage_ReadFile_Call{Call: _e.mock.On("ReadFile", filename)}
}

func (_c *Storage_ReadFile_Call) Run(run func(filename string)) *Storage_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_ReadFile_Call) Return(_a0 []byte, _a1 error) *Storage_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Storage_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *Storage_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: filename, data
func (_m *Storage) WriteFile(filename string, data []byte) error {
	ret := _m.Called(filename, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filename, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type Storage_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - filename string
//   - data []byte
func (_e *Storage_Expecter) WriteFile(filename interface{}, data interface{}) *Storage_WriteFile_Call {
	return &Storage_WriteFile_Call{Call: _e.mock.On("WriteFile", filename, data)}
}

func (_c *Storage_WriteFile_Call) Run(run func(filename string, data []byte)) *Storage_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *Storage_WriteFile_Call) Return(_a0 error) *Storage_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_WriteFile_Call) RunAndReturn(run func(string, []byte) error) *Storage_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
