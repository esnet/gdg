// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	api "github.com/esnet/gdg/internal/api"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"
)

// ServiceAccountApi is an autogenerated mock type for the ServiceAccountApi type
type ServiceAccountApi struct {
	mock.Mock
}

// CreateServiceAccount provides a mock function with given fields: name, role, expiration
func (_m *ServiceAccountApi) CreateServiceAccount(name string, role string, expiration int64) (*models.ServiceAccountDTO, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.ServiceAccountDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.ServiceAccountDTO, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.ServiceAccountDTO); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccountDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccountToken provides a mock function with given fields: name, role, expiration
func (_m *ServiceAccountApi) CreateServiceAccountToken(name int64, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(int64, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllServiceAccounts provides a mock function with given fields:
func (_m *ServiceAccountApi) DeleteAllServiceAccounts() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteServiceAccountTokens provides a mock function with given fields: serviceId
func (_m *ServiceAccountApi) DeleteServiceAccountTokens(serviceId int64) []string {
	ret := _m.Called(serviceId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListServiceAccounts provides a mock function with given fields:
func (_m *ServiceAccountApi) ListServiceAccounts() []*api.ServiceAccountDTOWithTokens {
	ret := _m.Called()

	var r0 []*api.ServiceAccountDTOWithTokens
	if rf, ok := ret.Get(0).(func() []*api.ServiceAccountDTOWithTokens); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ServiceAccountDTOWithTokens)
		}
	}

	return r0
}

// ListServiceAccountsTokens provides a mock function with given fields: id
func (_m *ServiceAccountApi) ListServiceAccountsTokens(id int64) ([]*models.TokenDTO, error) {
	ret := _m.Called(id)

	var r0 []*models.TokenDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*models.TokenDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []*models.TokenDTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TokenDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceAccountApi creates a new instance of ServiceAccountApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAccountApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAccountApi {
	mock := &ServiceAccountApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
