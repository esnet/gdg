// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	filters "github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"

	regexp "regexp"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// AddFilter provides a mock function with given fields: key, value
func (_m *Filter) AddFilter(key filters.FilterType, value string) {
	_m.Called(key, value)
}

// AddRegex provides a mock function with given fields: _a0, _a1
func (_m *Filter) AddRegex(_a0 filters.FilterType, _a1 *regexp.Regexp) {
	_m.Called(_a0, _a1)
}

// AddValidation provides a mock function with given fields: _a0, _a1
func (_m *Filter) AddValidation(_a0 filters.FilterType, _a1 func(interface{}) bool) {
	_m.Called(_a0, _a1)
}

// GetEntity provides a mock function with given fields: _a0
func (_m *Filter) GetEntity(_a0 filters.FilterType) []string {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.FilterType) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetFilter provides a mock function with given fields: key
func (_m *Filter) GetFilter(key filters.FilterType) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(filters.FilterType) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InvokeValidation provides a mock function with given fields: _a0, _a1
func (_m *Filter) InvokeValidation(_a0 filters.FilterType, _a1 interface{}) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(filters.FilterType, interface{}) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ValidateAll provides a mock function with given fields: _a0
func (_m *Filter) ValidateAll(_a0 interface{}) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
