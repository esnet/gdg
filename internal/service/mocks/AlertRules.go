// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/safaci2000/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAlertRules creates a new instance of AlertRules. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertRules(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertRules {
	mock := &AlertRules{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AlertRules is an autogenerated mock type for the AlertRules type
type AlertRules struct {
	mock.Mock
}

type AlertRules_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertRules) EXPECT() *AlertRules_Expecter {
	return &AlertRules_Expecter{mock: &_m.Mock}
}

// ClearAlertRules provides a mock function for the type AlertRules
func (_mock *AlertRules) ClearAlertRules() ([]string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearAlertRules")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertRules_ClearAlertRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAlertRules'
type AlertRules_ClearAlertRules_Call struct {
	*mock.Call
}

// ClearAlertRules is a helper method to define mock.On call
func (_e *AlertRules_Expecter) ClearAlertRules() *AlertRules_ClearAlertRules_Call {
	return &AlertRules_ClearAlertRules_Call{Call: _e.mock.On("ClearAlertRules")}
}

func (_c *AlertRules_ClearAlertRules_Call) Run(run func()) *AlertRules_ClearAlertRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertRules_ClearAlertRules_Call) Return(strings []string, err error) *AlertRules_ClearAlertRules_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *AlertRules_ClearAlertRules_Call) RunAndReturn(run func() ([]string, error)) *AlertRules_ClearAlertRules_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAlertRules provides a mock function for the type AlertRules
func (_mock *AlertRules) DownloadAlertRules() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadAlertRules")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertRules_DownloadAlertRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAlertRules'
type AlertRules_DownloadAlertRules_Call struct {
	*mock.Call
}

// DownloadAlertRules is a helper method to define mock.On call
func (_e *AlertRules_Expecter) DownloadAlertRules() *AlertRules_DownloadAlertRules_Call {
	return &AlertRules_DownloadAlertRules_Call{Call: _e.mock.On("DownloadAlertRules")}
}

func (_c *AlertRules_DownloadAlertRules_Call) Run(run func()) *AlertRules_DownloadAlertRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertRules_DownloadAlertRules_Call) Return(s string, err error) *AlertRules_DownloadAlertRules_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AlertRules_DownloadAlertRules_Call) RunAndReturn(run func() (string, error)) *AlertRules_DownloadAlertRules_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertRules provides a mock function for the type AlertRules
func (_mock *AlertRules) ListAlertRules() ([]*models.ProvisionedAlertRule, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAlertRules")
	}

	var r0 []*models.ProvisionedAlertRule
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*models.ProvisionedAlertRule, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*models.ProvisionedAlertRule); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ProvisionedAlertRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertRules_ListAlertRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertRules'
type AlertRules_ListAlertRules_Call struct {
	*mock.Call
}

// ListAlertRules is a helper method to define mock.On call
func (_e *AlertRules_Expecter) ListAlertRules() *AlertRules_ListAlertRules_Call {
	return &AlertRules_ListAlertRules_Call{Call: _e.mock.On("ListAlertRules")}
}

func (_c *AlertRules_ListAlertRules_Call) Run(run func()) *AlertRules_ListAlertRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertRules_ListAlertRules_Call) Return(provisionedAlertRules []*models.ProvisionedAlertRule, err error) *AlertRules_ListAlertRules_Call {
	_c.Call.Return(provisionedAlertRules, err)
	return _c
}

func (_c *AlertRules_ListAlertRules_Call) RunAndReturn(run func() ([]*models.ProvisionedAlertRule, error)) *AlertRules_ListAlertRules_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAlertRules provides a mock function for the type AlertRules
func (_mock *AlertRules) UploadAlertRules() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadAlertRules")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AlertRules_UploadAlertRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAlertRules'
type AlertRules_UploadAlertRules_Call struct {
	*mock.Call
}

// UploadAlertRules is a helper method to define mock.On call
func (_e *AlertRules_Expecter) UploadAlertRules() *AlertRules_UploadAlertRules_Call {
	return &AlertRules_UploadAlertRules_Call{Call: _e.mock.On("UploadAlertRules")}
}

func (_c *AlertRules_UploadAlertRules_Call) Run(run func()) *AlertRules_UploadAlertRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertRules_UploadAlertRules_Call) Return(err error) *AlertRules_UploadAlertRules_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AlertRules_UploadAlertRules_Call) RunAndReturn(run func() error) *AlertRules_UploadAlertRules_Call {
	_c.Call.Return(run)
	return _c
}
