// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/esnet/gdg/internal/service/domain"
	"github.com/esnet/gdg/internal/service/filters"
	"github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewLibraryElementsApi creates a new instance of LibraryElementsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLibraryElementsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LibraryElementsApi {
	mock := &LibraryElementsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LibraryElementsApi is an autogenerated mock type for the LibraryElementsApi type
type LibraryElementsApi struct {
	mock.Mock
}

type LibraryElementsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LibraryElementsApi) EXPECT() *LibraryElementsApi_Expecter {
	return &LibraryElementsApi_Expecter{mock: &_m.Mock}
}

// DeleteAllLibraryElements provides a mock function for the type LibraryElementsApi
func (_mock *LibraryElementsApi) DeleteAllLibraryElements(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllLibraryElements")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// LibraryElementsApi_DeleteAllLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllLibraryElements'
type LibraryElementsApi_DeleteAllLibraryElements_Call struct {
	*mock.Call
}

// DeleteAllLibraryElements is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *LibraryElementsApi_Expecter) DeleteAllLibraryElements(filter interface{}) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	return &LibraryElementsApi_DeleteAllLibraryElements_Call{Call: _e.mock.On("DeleteAllLibraryElements", filter)}
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) Run(run func(filter filters.V2Filter)) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) Return(strings []string) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadLibraryElements provides a mock function for the type LibraryElementsApi
func (_mock *LibraryElementsApi) DownloadLibraryElements(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadLibraryElements")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// LibraryElementsApi_DownloadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadLibraryElements'
type LibraryElementsApi_DownloadLibraryElements_Call struct {
	*mock.Call
}

// DownloadLibraryElements is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *LibraryElementsApi_Expecter) DownloadLibraryElements(filter interface{}) *LibraryElementsApi_DownloadLibraryElements_Call {
	return &LibraryElementsApi_DownloadLibraryElements_Call{Call: _e.mock.On("DownloadLibraryElements", filter)}
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) Run(run func(filter filters.V2Filter)) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) Return(strings []string) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElements provides a mock function for the type LibraryElementsApi
func (_mock *LibraryElementsApi) ListLibraryElements(filter filters.V2Filter) []*domain.WithNested[models.LibraryElementDTO] {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListLibraryElements")
	}

	var r0 []*domain.WithNested[models.LibraryElementDTO]
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []*domain.WithNested[models.LibraryElementDTO]); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.WithNested[models.LibraryElementDTO])
		}
	}
	return r0
}

// LibraryElementsApi_ListLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElements'
type LibraryElementsApi_ListLibraryElements_Call struct {
	*mock.Call
}

// ListLibraryElements is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *LibraryElementsApi_Expecter) ListLibraryElements(filter interface{}) *LibraryElementsApi_ListLibraryElements_Call {
	return &LibraryElementsApi_ListLibraryElements_Call{Call: _e.mock.On("ListLibraryElements", filter)}
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) Run(run func(filter filters.V2Filter)) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) Return(withNesteds []*domain.WithNested[models.LibraryElementDTO]) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Return(withNesteds)
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) RunAndReturn(run func(filter filters.V2Filter) []*domain.WithNested[models.LibraryElementDTO]) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElementsConnections provides a mock function for the type LibraryElementsApi
func (_mock *LibraryElementsApi) ListLibraryElementsConnections(filter filters.V2Filter, connectionID string) []*models.DashboardFullWithMeta {
	ret := _mock.Called(filter, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for ListLibraryElementsConnections")
	}

	var r0 []*models.DashboardFullWithMeta
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter, string) []*models.DashboardFullWithMeta); ok {
		r0 = returnFunc(filter, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DashboardFullWithMeta)
		}
	}
	return r0
}

// LibraryElementsApi_ListLibraryElementsConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElementsConnections'
type LibraryElementsApi_ListLibraryElementsConnections_Call struct {
	*mock.Call
}

// ListLibraryElementsConnections is a helper method to define mock.On call
//   - filter filters.V2Filter
//   - connectionID string
func (_e *LibraryElementsApi_Expecter) ListLibraryElementsConnections(filter interface{}, connectionID interface{}) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	return &LibraryElementsApi_ListLibraryElementsConnections_Call{Call: _e.mock.On("ListLibraryElementsConnections", filter, connectionID)}
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) Run(run func(filter filters.V2Filter, connectionID string)) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) Return(dashboardFullWithMetas []*models.DashboardFullWithMeta) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Return(dashboardFullWithMetas)
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) RunAndReturn(run func(filter filters.V2Filter, connectionID string) []*models.DashboardFullWithMeta) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Return(run)
	return _c
}

// UploadLibraryElements provides a mock function for the type LibraryElementsApi
func (_mock *LibraryElementsApi) UploadLibraryElements(filter filters.V2Filter) []string {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadLibraryElements")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(filters.V2Filter) []string); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// LibraryElementsApi_UploadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadLibraryElements'
type LibraryElementsApi_UploadLibraryElements_Call struct {
	*mock.Call
}

// UploadLibraryElements is a helper method to define mock.On call
//   - filter filters.V2Filter
func (_e *LibraryElementsApi_Expecter) UploadLibraryElements(filter interface{}) *LibraryElementsApi_UploadLibraryElements_Call {
	return &LibraryElementsApi_UploadLibraryElements_Call{Call: _e.mock.On("UploadLibraryElements", filter)}
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) Run(run func(filter filters.V2Filter)) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 filters.V2Filter
		if args[0] != nil {
			arg0 = args[0].(filters.V2Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) Return(strings []string) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) RunAndReturn(run func(filter filters.V2Filter) []string) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}
