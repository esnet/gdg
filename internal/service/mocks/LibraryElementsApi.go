// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	filters "github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"
)

// LibraryElementsApi is an autogenerated mock type for the LibraryElementsApi type
type LibraryElementsApi struct {
	mock.Mock
}

type LibraryElementsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *LibraryElementsApi) EXPECT() *LibraryElementsApi_Expecter {
	return &LibraryElementsApi_Expecter{mock: &_m.Mock}
}

// DeleteAllLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) DeleteAllLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// LibraryElementsApi_DeleteAllLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllLibraryElements'
type LibraryElementsApi_DeleteAllLibraryElements_Call struct {
	*mock.Call
}

// DeleteAllLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *LibraryElementsApi_Expecter) DeleteAllLibraryElements(filter interface{}) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	return &LibraryElementsApi_DeleteAllLibraryElements_Call{Call: _e.mock.On("DeleteAllLibraryElements", filter)}
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) Run(run func(filter filters.Filter)) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) Return(_a0 []string) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryElementsApi_DeleteAllLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *LibraryElementsApi_DeleteAllLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) DownloadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// LibraryElementsApi_DownloadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadLibraryElements'
type LibraryElementsApi_DownloadLibraryElements_Call struct {
	*mock.Call
}

// DownloadLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *LibraryElementsApi_Expecter) DownloadLibraryElements(filter interface{}) *LibraryElementsApi_DownloadLibraryElements_Call {
	return &LibraryElementsApi_DownloadLibraryElements_Call{Call: _e.mock.On("DownloadLibraryElements", filter)}
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) Run(run func(filter filters.Filter)) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) Return(_a0 []string) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryElementsApi_DownloadLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *LibraryElementsApi_DownloadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) ListLibraryElements(filter filters.Filter) []*models.LibraryElementDTO {
	ret := _m.Called(filter)

	var r0 []*models.LibraryElementDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.LibraryElementDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LibraryElementDTO)
		}
	}

	return r0
}

// LibraryElementsApi_ListLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElements'
type LibraryElementsApi_ListLibraryElements_Call struct {
	*mock.Call
}

// ListLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *LibraryElementsApi_Expecter) ListLibraryElements(filter interface{}) *LibraryElementsApi_ListLibraryElements_Call {
	return &LibraryElementsApi_ListLibraryElements_Call{Call: _e.mock.On("ListLibraryElements", filter)}
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) Run(run func(filter filters.Filter)) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) Return(_a0 []*models.LibraryElementDTO) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElements_Call) RunAndReturn(run func(filters.Filter) []*models.LibraryElementDTO) *LibraryElementsApi_ListLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElementsConnections provides a mock function with given fields: filter, connectionID
func (_m *LibraryElementsApi) ListLibraryElementsConnections(filter filters.Filter, connectionID string) []*models.DashboardFullWithMeta {
	ret := _m.Called(filter, connectionID)

	var r0 []*models.DashboardFullWithMeta
	if rf, ok := ret.Get(0).(func(filters.Filter, string) []*models.DashboardFullWithMeta); ok {
		r0 = rf(filter, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DashboardFullWithMeta)
		}
	}

	return r0
}

// LibraryElementsApi_ListLibraryElementsConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElementsConnections'
type LibraryElementsApi_ListLibraryElementsConnections_Call struct {
	*mock.Call
}

// ListLibraryElementsConnections is a helper method to define mock.On call
//   - filter filters.Filter
//   - connectionID string
func (_e *LibraryElementsApi_Expecter) ListLibraryElementsConnections(filter interface{}, connectionID interface{}) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	return &LibraryElementsApi_ListLibraryElementsConnections_Call{Call: _e.mock.On("ListLibraryElementsConnections", filter, connectionID)}
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) Run(run func(filter filters.Filter, connectionID string)) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter), args[1].(string))
	})
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) Return(_a0 []*models.DashboardFullWithMeta) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryElementsApi_ListLibraryElementsConnections_Call) RunAndReturn(run func(filters.Filter, string) []*models.DashboardFullWithMeta) *LibraryElementsApi_ListLibraryElementsConnections_Call {
	_c.Call.Return(run)
	return _c
}

// UploadLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) UploadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// LibraryElementsApi_UploadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadLibraryElements'
type LibraryElementsApi_UploadLibraryElements_Call struct {
	*mock.Call
}

// UploadLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *LibraryElementsApi_Expecter) UploadLibraryElements(filter interface{}) *LibraryElementsApi_UploadLibraryElements_Call {
	return &LibraryElementsApi_UploadLibraryElements_Call{Call: _e.mock.On("UploadLibraryElements", filter)}
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) Run(run func(filter filters.Filter)) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) Return(_a0 []string) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LibraryElementsApi_UploadLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *LibraryElementsApi_UploadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// NewLibraryElementsApi creates a new instance of LibraryElementsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLibraryElementsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LibraryElementsApi {
	mock := &LibraryElementsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
