// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	filters "github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"
)

// LibraryElementsApi is an autogenerated mock type for the LibraryElementsApi type
type LibraryElementsApi struct {
	mock.Mock
}

// DeleteAllLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) DeleteAllLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) DownloadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) ListLibraryElements(filter filters.Filter) []*models.LibraryElementDTO {
	ret := _m.Called(filter)

	var r0 []*models.LibraryElementDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.LibraryElementDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LibraryElementDTO)
		}
	}

	return r0
}

// ListLibraryElementsConnections provides a mock function with given fields: filter, connectionID
func (_m *LibraryElementsApi) ListLibraryElementsConnections(filter filters.Filter, connectionID string) []*models.DashboardFullWithMeta {
	ret := _m.Called(filter, connectionID)

	var r0 []*models.DashboardFullWithMeta
	if rf, ok := ret.Get(0).(func(filters.Filter, string) []*models.DashboardFullWithMeta); ok {
		r0 = rf(filter, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DashboardFullWithMeta)
		}
	}

	return r0
}

// UploadLibraryElements provides a mock function with given fields: filter
func (_m *LibraryElementsApi) UploadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewLibraryElementsApi creates a new instance of LibraryElementsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLibraryElementsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *LibraryElementsApi {
	mock := &LibraryElementsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
