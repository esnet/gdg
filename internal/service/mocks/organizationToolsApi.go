// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// organizationToolsApi is an autogenerated mock type for the organizationToolsApi type
type organizationToolsApi struct {
	mock.Mock
}

type organizationToolsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *organizationToolsApi) EXPECT() *organizationToolsApi_Expecter {
	return &organizationToolsApi_Expecter{mock: &_m.Mock}
}

// GetTokenOrganization provides a mock function with given fields:
func (_m *organizationToolsApi) GetTokenOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTokenOrganization")
	}

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// organizationToolsApi_GetTokenOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenOrganization'
type organizationToolsApi_GetTokenOrganization_Call struct {
	*mock.Call
}

// GetTokenOrganization is a helper method to define mock.On call
func (_e *organizationToolsApi_Expecter) GetTokenOrganization() *organizationToolsApi_GetTokenOrganization_Call {
	return &organizationToolsApi_GetTokenOrganization_Call{Call: _e.mock.On("GetTokenOrganization")}
}

func (_c *organizationToolsApi_GetTokenOrganization_Call) Run(run func()) *organizationToolsApi_GetTokenOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *organizationToolsApi_GetTokenOrganization_Call) Return(_a0 *models.OrgDetailsDTO) *organizationToolsApi_GetTokenOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *organizationToolsApi_GetTokenOrganization_Call) RunAndReturn(run func() *models.OrgDetailsDTO) *organizationToolsApi_GetTokenOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrganization provides a mock function with given fields:
func (_m *organizationToolsApi) GetUserOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrganization")
	}

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// organizationToolsApi_GetUserOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrganization'
type organizationToolsApi_GetUserOrganization_Call struct {
	*mock.Call
}

// GetUserOrganization is a helper method to define mock.On call
func (_e *organizationToolsApi_Expecter) GetUserOrganization() *organizationToolsApi_GetUserOrganization_Call {
	return &organizationToolsApi_GetUserOrganization_Call{Call: _e.mock.On("GetUserOrganization")}
}

func (_c *organizationToolsApi_GetUserOrganization_Call) Run(run func()) *organizationToolsApi_GetUserOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *organizationToolsApi_GetUserOrganization_Call) Return(_a0 *models.OrgDetailsDTO) *organizationToolsApi_GetUserOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *organizationToolsApi_GetUserOrganization_Call) RunAndReturn(run func() *models.OrgDetailsDTO) *organizationToolsApi_GetUserOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserOrganizations provides a mock function with given fields:
func (_m *organizationToolsApi) ListUserOrganizations() ([]*models.UserOrgDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUserOrganizations")
	}

	var r0 []*models.UserOrgDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.UserOrgDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.UserOrgDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserOrgDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// organizationToolsApi_ListUserOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserOrganizations'
type organizationToolsApi_ListUserOrganizations_Call struct {
	*mock.Call
}

// ListUserOrganizations is a helper method to define mock.On call
func (_e *organizationToolsApi_Expecter) ListUserOrganizations() *organizationToolsApi_ListUserOrganizations_Call {
	return &organizationToolsApi_ListUserOrganizations_Call{Call: _e.mock.On("ListUserOrganizations")}
}

func (_c *organizationToolsApi_ListUserOrganizations_Call) Run(run func()) *organizationToolsApi_ListUserOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *organizationToolsApi_ListUserOrganizations_Call) Return(_a0 []*models.UserOrgDTO, _a1 error) *organizationToolsApi_ListUserOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *organizationToolsApi_ListUserOrganizations_Call) RunAndReturn(run func() ([]*models.UserOrgDTO, error)) *organizationToolsApi_ListUserOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// SetOrganizationByName provides a mock function with given fields: name, useSlug
func (_m *organizationToolsApi) SetOrganizationByName(name string, useSlug bool) error {
	ret := _m.Called(name, useSlug)

	if len(ret) == 0 {
		panic("no return value specified for SetOrganizationByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, useSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// organizationToolsApi_SetOrganizationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrganizationByName'
type organizationToolsApi_SetOrganizationByName_Call struct {
	*mock.Call
}

// SetOrganizationByName is a helper method to define mock.On call
//   - name string
//   - useSlug bool
func (_e *organizationToolsApi_Expecter) SetOrganizationByName(name interface{}, useSlug interface{}) *organizationToolsApi_SetOrganizationByName_Call {
	return &organizationToolsApi_SetOrganizationByName_Call{Call: _e.mock.On("SetOrganizationByName", name, useSlug)}
}

func (_c *organizationToolsApi_SetOrganizationByName_Call) Run(run func(name string, useSlug bool)) *organizationToolsApi_SetOrganizationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *organizationToolsApi_SetOrganizationByName_Call) Return(_a0 error) *organizationToolsApi_SetOrganizationByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *organizationToolsApi_SetOrganizationByName_Call) RunAndReturn(run func(string, bool) error) *organizationToolsApi_SetOrganizationByName_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserOrganizations provides a mock function with given fields: id
func (_m *organizationToolsApi) SetUserOrganizations(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetUserOrganizations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// organizationToolsApi_SetUserOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserOrganizations'
type organizationToolsApi_SetUserOrganizations_Call struct {
	*mock.Call
}

// SetUserOrganizations is a helper method to define mock.On call
//   - id int64
func (_e *organizationToolsApi_Expecter) SetUserOrganizations(id interface{}) *organizationToolsApi_SetUserOrganizations_Call {
	return &organizationToolsApi_SetUserOrganizations_Call{Call: _e.mock.On("SetUserOrganizations", id)}
}

func (_c *organizationToolsApi_SetUserOrganizations_Call) Run(run func(id int64)) *organizationToolsApi_SetUserOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *organizationToolsApi_SetUserOrganizations_Call) Return(_a0 error) *organizationToolsApi_SetUserOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *organizationToolsApi_SetUserOrganizations_Call) RunAndReturn(run func(int64) error) *organizationToolsApi_SetUserOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// newOrganizationToolsApi creates a new instance of organizationToolsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newOrganizationToolsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *organizationToolsApi {
	mock := &organizationToolsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
