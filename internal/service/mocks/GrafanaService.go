// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	filters "github.com/esnet/gdg/internal/service/filters"
	internaltypes "github.com/esnet/gdg/internal/types"

	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana-openapi-client-go/models"

	types "github.com/esnet/gdg/internal/service/types"
)

// GrafanaService is an autogenerated mock type for the GrafanaService type
type GrafanaService struct {
	mock.Mock
}

type GrafanaService_Expecter struct {
	mock *mock.Mock
}

func (_m *GrafanaService) EXPECT() *GrafanaService_Expecter {
	return &GrafanaService_Expecter{mock: &_m.Mock}
}

// AddUserToOrg provides a mock function with given fields: role, orgSlug, userId
func (_m *GrafanaService) AddUserToOrg(role string, orgSlug string, userId int64) error {
	ret := _m.Called(role, orgSlug, userId)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(role, orgSlug, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_AddUserToOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToOrg'
type GrafanaService_AddUserToOrg_Call struct {
	*mock.Call
}

// AddUserToOrg is a helper method to define mock.On call
//   - role string
//   - orgSlug string
//   - userId int64
func (_e *GrafanaService_Expecter) AddUserToOrg(role interface{}, orgSlug interface{}, userId interface{}) *GrafanaService_AddUserToOrg_Call {
	return &GrafanaService_AddUserToOrg_Call{Call: _e.mock.On("AddUserToOrg", role, orgSlug, userId)}
}

func (_c *GrafanaService_AddUserToOrg_Call) Run(run func(role string, orgSlug string, userId int64)) *GrafanaService_AddUserToOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *GrafanaService_AddUserToOrg_Call) Return(_a0 error) *GrafanaService_AddUserToOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_AddUserToOrg_Call) RunAndReturn(run func(string, string, int64) error) *GrafanaService_AddUserToOrg_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAPIKey provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateAPIKey(name string, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type GrafanaService_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - name string
//   - role string
//   - expiration int64
func (_e *GrafanaService_Expecter) CreateAPIKey(name interface{}, role interface{}, expiration interface{}) *GrafanaService_CreateAPIKey_Call {
	return &GrafanaService_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", name, role, expiration)}
}

func (_c *GrafanaService_CreateAPIKey_Call) Run(run func(name string, role string, expiration int64)) *GrafanaService_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *GrafanaService_CreateAPIKey_Call) Return(_a0 *models.NewAPIKeyResult, _a1 error) *GrafanaService_CreateAPIKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_CreateAPIKey_Call) RunAndReturn(run func(string, string, int64) (*models.NewAPIKeyResult, error)) *GrafanaService_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccount provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateServiceAccount(name string, role string, expiration int64) (*models.ServiceAccountDTO, error) {
	ret := _m.Called(name, role, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccount")
	}

	var r0 *models.ServiceAccountDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.ServiceAccountDTO, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.ServiceAccountDTO); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccountDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_CreateServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccount'
type GrafanaService_CreateServiceAccount_Call struct {
	*mock.Call
}

// CreateServiceAccount is a helper method to define mock.On call
//   - name string
//   - role string
//   - expiration int64
func (_e *GrafanaService_Expecter) CreateServiceAccount(name interface{}, role interface{}, expiration interface{}) *GrafanaService_CreateServiceAccount_Call {
	return &GrafanaService_CreateServiceAccount_Call{Call: _e.mock.On("CreateServiceAccount", name, role, expiration)}
}

func (_c *GrafanaService_CreateServiceAccount_Call) Run(run func(name string, role string, expiration int64)) *GrafanaService_CreateServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *GrafanaService_CreateServiceAccount_Call) Return(_a0 *models.ServiceAccountDTO, _a1 error) *GrafanaService_CreateServiceAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_CreateServiceAccount_Call) RunAndReturn(run func(string, string, int64) (*models.ServiceAccountDTO, error)) *GrafanaService_CreateServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceAccountToken provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateServiceAccountToken(name int64, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAccountToken")
	}

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(int64, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_CreateServiceAccountToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceAccountToken'
type GrafanaService_CreateServiceAccountToken_Call struct {
	*mock.Call
}

// CreateServiceAccountToken is a helper method to define mock.On call
//   - name int64
//   - role string
//   - expiration int64
func (_e *GrafanaService_Expecter) CreateServiceAccountToken(name interface{}, role interface{}, expiration interface{}) *GrafanaService_CreateServiceAccountToken_Call {
	return &GrafanaService_CreateServiceAccountToken_Call{Call: _e.mock.On("CreateServiceAccountToken", name, role, expiration)}
}

func (_c *GrafanaService_CreateServiceAccountToken_Call) Run(run func(name int64, role string, expiration int64)) *GrafanaService_CreateServiceAccountToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *GrafanaService_CreateServiceAccountToken_Call) Return(_a0 *models.NewAPIKeyResult, _a1 error) *GrafanaService_CreateServiceAccountToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_CreateServiceAccountToken_Call) RunAndReturn(run func(int64, string, int64) (*models.NewAPIKeyResult, error)) *GrafanaService_CreateServiceAccountToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllConnectionPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllConnectionPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllConnectionPermissions'
type GrafanaService_DeleteAllConnectionPermissions_Call struct {
	*mock.Call
}

// DeleteAllConnectionPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllConnectionPermissions(filter interface{}) *GrafanaService_DeleteAllConnectionPermissions_Call {
	return &GrafanaService_DeleteAllConnectionPermissions_Call{Call: _e.mock.On("DeleteAllConnectionPermissions", filter)}
}

func (_c *GrafanaService_DeleteAllConnectionPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllConnectionPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllConnectionPermissions_Call) Return(_a0 []string) *GrafanaService_DeleteAllConnectionPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllConnectionPermissions_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllConnectionPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllConnections provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllConnections")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllConnections'
type GrafanaService_DeleteAllConnections_Call struct {
	*mock.Call
}

// DeleteAllConnections is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllConnections(filter interface{}) *GrafanaService_DeleteAllConnections_Call {
	return &GrafanaService_DeleteAllConnections_Call{Call: _e.mock.On("DeleteAllConnections", filter)}
}

func (_c *GrafanaService_DeleteAllConnections_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllConnections_Call) Return(_a0 []string) *GrafanaService_DeleteAllConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllConnections_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllConnections_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllDashboards(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllDashboards")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllDashboards'
type GrafanaService_DeleteAllDashboards_Call struct {
	*mock.Call
}

// DeleteAllDashboards is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllDashboards(filter interface{}) *GrafanaService_DeleteAllDashboards_Call {
	return &GrafanaService_DeleteAllDashboards_Call{Call: _e.mock.On("DeleteAllDashboards", filter)}
}

func (_c *GrafanaService_DeleteAllDashboards_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllDashboards_Call) Return(_a0 []string) *GrafanaService_DeleteAllDashboards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllDashboards_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllFolders provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllFolders")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllFolders'
type GrafanaService_DeleteAllFolders_Call struct {
	*mock.Call
}

// DeleteAllFolders is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllFolders(filter interface{}) *GrafanaService_DeleteAllFolders_Call {
	return &GrafanaService_DeleteAllFolders_Call{Call: _e.mock.On("DeleteAllFolders", filter)}
}

func (_c *GrafanaService_DeleteAllFolders_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllFolders_Call) Return(_a0 []string) *GrafanaService_DeleteAllFolders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllFolders_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllFolders_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllLibraryElements")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllLibraryElements'
type GrafanaService_DeleteAllLibraryElements_Call struct {
	*mock.Call
}

// DeleteAllLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllLibraryElements(filter interface{}) *GrafanaService_DeleteAllLibraryElements_Call {
	return &GrafanaService_DeleteAllLibraryElements_Call{Call: _e.mock.On("DeleteAllLibraryElements", filter)}
}

func (_c *GrafanaService_DeleteAllLibraryElements_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllLibraryElements_Call) Return(_a0 []string) *GrafanaService_DeleteAllLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllServiceAccounts provides a mock function with given fields:
func (_m *GrafanaService) DeleteAllServiceAccounts() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllServiceAccounts")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllServiceAccounts'
type GrafanaService_DeleteAllServiceAccounts_Call struct {
	*mock.Call
}

// DeleteAllServiceAccounts is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) DeleteAllServiceAccounts() *GrafanaService_DeleteAllServiceAccounts_Call {
	return &GrafanaService_DeleteAllServiceAccounts_Call{Call: _e.mock.On("DeleteAllServiceAccounts")}
}

func (_c *GrafanaService_DeleteAllServiceAccounts_Call) Run(run func()) *GrafanaService_DeleteAllServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_DeleteAllServiceAccounts_Call) Return(_a0 []string) *GrafanaService_DeleteAllServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllServiceAccounts_Call) RunAndReturn(run func() []string) *GrafanaService_DeleteAllServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllTokens provides a mock function with given fields:
func (_m *GrafanaService) DeleteAllTokens() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllTokens")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllTokens'
type GrafanaService_DeleteAllTokens_Call struct {
	*mock.Call
}

// DeleteAllTokens is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) DeleteAllTokens() *GrafanaService_DeleteAllTokens_Call {
	return &GrafanaService_DeleteAllTokens_Call{Call: _e.mock.On("DeleteAllTokens")}
}

func (_c *GrafanaService_DeleteAllTokens_Call) Run(run func()) *GrafanaService_DeleteAllTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_DeleteAllTokens_Call) Return(_a0 []string) *GrafanaService_DeleteAllTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllTokens_Call) RunAndReturn(run func() []string) *GrafanaService_DeleteAllTokens_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllUsers provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUsers")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllUsers'
type GrafanaService_DeleteAllUsers_Call struct {
	*mock.Call
}

// DeleteAllUsers is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteAllUsers(filter interface{}) *GrafanaService_DeleteAllUsers_Call {
	return &GrafanaService_DeleteAllUsers_Call{Call: _e.mock.On("DeleteAllUsers", filter)}
}

func (_c *GrafanaService_DeleteAllUsers_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteAllUsers_Call) Return(_a0 []string) *GrafanaService_DeleteAllUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteAllUsers_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DeleteAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceAccountTokens provides a mock function with given fields: serviceId
func (_m *GrafanaService) DeleteServiceAccountTokens(serviceId int64) []string {
	ret := _m.Called(serviceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAccountTokens")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DeleteServiceAccountTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceAccountTokens'
type GrafanaService_DeleteServiceAccountTokens_Call struct {
	*mock.Call
}

// DeleteServiceAccountTokens is a helper method to define mock.On call
//   - serviceId int64
func (_e *GrafanaService_Expecter) DeleteServiceAccountTokens(serviceId interface{}) *GrafanaService_DeleteServiceAccountTokens_Call {
	return &GrafanaService_DeleteServiceAccountTokens_Call{Call: _e.mock.On("DeleteServiceAccountTokens", serviceId)}
}

func (_c *GrafanaService_DeleteServiceAccountTokens_Call) Run(run func(serviceId int64)) *GrafanaService_DeleteServiceAccountTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GrafanaService_DeleteServiceAccountTokens_Call) Return(_a0 []string) *GrafanaService_DeleteServiceAccountTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteServiceAccountTokens_Call) RunAndReturn(run func(int64) []string) *GrafanaService_DeleteServiceAccountTokens_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteTeam(filter filters.Filter) ([]*models.TeamDTO, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 []*models.TeamDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(filters.Filter) ([]*models.TeamDTO, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.TeamDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TeamDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(filters.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type GrafanaService_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DeleteTeam(filter interface{}) *GrafanaService_DeleteTeam_Call {
	return &GrafanaService_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", filter)}
}

func (_c *GrafanaService_DeleteTeam_Call) Run(run func(filter filters.Filter)) *GrafanaService_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DeleteTeam_Call) Return(_a0 []*models.TeamDTO, _a1 error) *GrafanaService_DeleteTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_DeleteTeam_Call) RunAndReturn(run func(filters.Filter) ([]*models.TeamDTO, error)) *GrafanaService_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserFromOrg provides a mock function with given fields: orgId, userId
func (_m *GrafanaService) DeleteUserFromOrg(orgId string, userId int64) error {
	ret := _m.Called(orgId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserFromOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(orgId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_DeleteUserFromOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFromOrg'
type GrafanaService_DeleteUserFromOrg_Call struct {
	*mock.Call
}

// DeleteUserFromOrg is a helper method to define mock.On call
//   - orgId string
//   - userId int64
func (_e *GrafanaService_Expecter) DeleteUserFromOrg(orgId interface{}, userId interface{}) *GrafanaService_DeleteUserFromOrg_Call {
	return &GrafanaService_DeleteUserFromOrg_Call{Call: _e.mock.On("DeleteUserFromOrg", orgId, userId)}
}

func (_c *GrafanaService_DeleteUserFromOrg_Call) Run(run func(orgId string, userId int64)) *GrafanaService_DeleteUserFromOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *GrafanaService_DeleteUserFromOrg_Call) Return(_a0 error) *GrafanaService_DeleteUserFromOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DeleteUserFromOrg_Call) RunAndReturn(run func(string, int64) error) *GrafanaService_DeleteUserFromOrg_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadConnectionPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadConnectionPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadConnectionPermissions'
type GrafanaService_DownloadConnectionPermissions_Call struct {
	*mock.Call
}

// DownloadConnectionPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadConnectionPermissions(filter interface{}) *GrafanaService_DownloadConnectionPermissions_Call {
	return &GrafanaService_DownloadConnectionPermissions_Call{Call: _e.mock.On("DownloadConnectionPermissions", filter)}
}

func (_c *GrafanaService_DownloadConnectionPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadConnectionPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadConnectionPermissions_Call) Return(_a0 []string) *GrafanaService_DownloadConnectionPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadConnectionPermissions_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadConnectionPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadConnections provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadConnections")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadConnections'
type GrafanaService_DownloadConnections_Call struct {
	*mock.Call
}

// DownloadConnections is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadConnections(filter interface{}) *GrafanaService_DownloadConnections_Call {
	return &GrafanaService_DownloadConnections_Call{Call: _e.mock.On("DownloadConnections", filter)}
}

func (_c *GrafanaService_DownloadConnections_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadConnections_Call) Return(_a0 []string) *GrafanaService_DownloadConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadConnections_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadConnections_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadDashboards(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDashboards")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadDashboards'
type GrafanaService_DownloadDashboards_Call struct {
	*mock.Call
}

// DownloadDashboards is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadDashboards(filter interface{}) *GrafanaService_DownloadDashboards_Call {
	return &GrafanaService_DownloadDashboards_Call{Call: _e.mock.On("DownloadDashboards", filter)}
}

func (_c *GrafanaService_DownloadDashboards_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadDashboards_Call) Return(_a0 []string) *GrafanaService_DownloadDashboards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadDashboards_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadFolderPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFolderPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadFolderPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFolderPermissions'
type GrafanaService_DownloadFolderPermissions_Call struct {
	*mock.Call
}

// DownloadFolderPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadFolderPermissions(filter interface{}) *GrafanaService_DownloadFolderPermissions_Call {
	return &GrafanaService_DownloadFolderPermissions_Call{Call: _e.mock.On("DownloadFolderPermissions", filter)}
}

func (_c *GrafanaService_DownloadFolderPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadFolderPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadFolderPermissions_Call) Return(_a0 []string) *GrafanaService_DownloadFolderPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadFolderPermissions_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadFolderPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFolders provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFolders")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFolders'
type GrafanaService_DownloadFolders_Call struct {
	*mock.Call
}

// DownloadFolders is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadFolders(filter interface{}) *GrafanaService_DownloadFolders_Call {
	return &GrafanaService_DownloadFolders_Call{Call: _e.mock.On("DownloadFolders", filter)}
}

func (_c *GrafanaService_DownloadFolders_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadFolders_Call) Return(_a0 []string) *GrafanaService_DownloadFolders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadFolders_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadFolders_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadLibraryElements")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadLibraryElements'
type GrafanaService_DownloadLibraryElements_Call struct {
	*mock.Call
}

// DownloadLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadLibraryElements(filter interface{}) *GrafanaService_DownloadLibraryElements_Call {
	return &GrafanaService_DownloadLibraryElements_Call{Call: _e.mock.On("DownloadLibraryElements", filter)}
}

func (_c *GrafanaService_DownloadLibraryElements_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadLibraryElements_Call) Return(_a0 []string) *GrafanaService_DownloadLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadOrganizations provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadOrganizations(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadOrganizations")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadOrganizations'
type GrafanaService_DownloadOrganizations_Call struct {
	*mock.Call
}

// DownloadOrganizations is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadOrganizations(filter interface{}) *GrafanaService_DownloadOrganizations_Call {
	return &GrafanaService_DownloadOrganizations_Call{Call: _e.mock.On("DownloadOrganizations", filter)}
}

func (_c *GrafanaService_DownloadOrganizations_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadOrganizations_Call) Return(_a0 []string) *GrafanaService_DownloadOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadOrganizations_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadTeams provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadTeams")
	}

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// GrafanaService_DownloadTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadTeams'
type GrafanaService_DownloadTeams_Call struct {
	*mock.Call
}

// DownloadTeams is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadTeams(filter interface{}) *GrafanaService_DownloadTeams_Call {
	return &GrafanaService_DownloadTeams_Call{Call: _e.mock.On("DownloadTeams", filter)}
}

func (_c *GrafanaService_DownloadTeams_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadTeams_Call) Return(_a0 map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_DownloadTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadTeams_Call) RunAndReturn(run func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_DownloadTeams_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadUsers provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for DownloadUsers")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_DownloadUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadUsers'
type GrafanaService_DownloadUsers_Call struct {
	*mock.Call
}

// DownloadUsers is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) DownloadUsers(filter interface{}) *GrafanaService_DownloadUsers_Call {
	return &GrafanaService_DownloadUsers_Call{Call: _e.mock.On("DownloadUsers", filter)}
}

func (_c *GrafanaService_DownloadUsers_Call) Run(run func(filter filters.Filter)) *GrafanaService_DownloadUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_DownloadUsers_Call) Return(_a0 []string) *GrafanaService_DownloadUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_DownloadUsers_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_DownloadUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrgPreferences provides a mock function with given fields: orgName
func (_m *GrafanaService) GetOrgPreferences(orgName string) (*models.Preferences, error) {
	ret := _m.Called(orgName)

	if len(ret) == 0 {
		panic("no return value specified for GetOrgPreferences")
	}

	var r0 *models.Preferences
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Preferences, error)); ok {
		return rf(orgName)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Preferences); ok {
		r0 = rf(orgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Preferences)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_GetOrgPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrgPreferences'
type GrafanaService_GetOrgPreferences_Call struct {
	*mock.Call
}

// GetOrgPreferences is a helper method to define mock.On call
//   - orgName string
func (_e *GrafanaService_Expecter) GetOrgPreferences(orgName interface{}) *GrafanaService_GetOrgPreferences_Call {
	return &GrafanaService_GetOrgPreferences_Call{Call: _e.mock.On("GetOrgPreferences", orgName)}
}

func (_c *GrafanaService_GetOrgPreferences_Call) Run(run func(orgName string)) *GrafanaService_GetOrgPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GrafanaService_GetOrgPreferences_Call) Return(_a0 *models.Preferences, _a1 error) *GrafanaService_GetOrgPreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_GetOrgPreferences_Call) RunAndReturn(run func(string) (*models.Preferences, error)) *GrafanaService_GetOrgPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerInfo provides a mock function with given fields:
func (_m *GrafanaService) GetServerInfo() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerInfo")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GrafanaService_GetServerInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerInfo'
type GrafanaService_GetServerInfo_Call struct {
	*mock.Call
}

// GetServerInfo is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) GetServerInfo() *GrafanaService_GetServerInfo_Call {
	return &GrafanaService_GetServerInfo_Call{Call: _e.mock.On("GetServerInfo")}
}

func (_c *GrafanaService_GetServerInfo_Call) Run(run func()) *GrafanaService_GetServerInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_GetServerInfo_Call) Return(_a0 map[string]interface{}) *GrafanaService_GetServerInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_GetServerInfo_Call) RunAndReturn(run func() map[string]interface{}) *GrafanaService_GetServerInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenOrganization provides a mock function with given fields:
func (_m *GrafanaService) GetTokenOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTokenOrganization")
	}

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// GrafanaService_GetTokenOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenOrganization'
type GrafanaService_GetTokenOrganization_Call struct {
	*mock.Call
}

// GetTokenOrganization is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) GetTokenOrganization() *GrafanaService_GetTokenOrganization_Call {
	return &GrafanaService_GetTokenOrganization_Call{Call: _e.mock.On("GetTokenOrganization")}
}

func (_c *GrafanaService_GetTokenOrganization_Call) Run(run func()) *GrafanaService_GetTokenOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_GetTokenOrganization_Call) Return(_a0 *models.OrgDetailsDTO) *GrafanaService_GetTokenOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_GetTokenOrganization_Call) RunAndReturn(run func() *models.OrgDetailsDTO) *GrafanaService_GetTokenOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields:
func (_m *GrafanaService) GetUserInfo() (*models.UserProfileDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *models.UserProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.UserProfileDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.UserProfileDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type GrafanaService_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) GetUserInfo() *GrafanaService_GetUserInfo_Call {
	return &GrafanaService_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo")}
}

func (_c *GrafanaService_GetUserInfo_Call) Run(run func()) *GrafanaService_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_GetUserInfo_Call) Return(_a0 *models.UserProfileDTO, _a1 error) *GrafanaService_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_GetUserInfo_Call) RunAndReturn(run func() (*models.UserProfileDTO, error)) *GrafanaService_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserOrganization provides a mock function with given fields:
func (_m *GrafanaService) GetUserOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrganization")
	}

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// GrafanaService_GetUserOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrganization'
type GrafanaService_GetUserOrganization_Call struct {
	*mock.Call
}

// GetUserOrganization is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) GetUserOrganization() *GrafanaService_GetUserOrganization_Call {
	return &GrafanaService_GetUserOrganization_Call{Call: _e.mock.On("GetUserOrganization")}
}

func (_c *GrafanaService_GetUserOrganization_Call) Run(run func()) *GrafanaService_GetUserOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_GetUserOrganization_Call) Return(_a0 *models.OrgDetailsDTO) *GrafanaService_GetUserOrganization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_GetUserOrganization_Call) RunAndReturn(run func() *models.OrgDetailsDTO) *GrafanaService_GetUserOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// InitOrganizations provides a mock function with given fields:
func (_m *GrafanaService) InitOrganizations() {
	_m.Called()
}

// GrafanaService_InitOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitOrganizations'
type GrafanaService_InitOrganizations_Call struct {
	*mock.Call
}

// InitOrganizations is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) InitOrganizations() *GrafanaService_InitOrganizations_Call {
	return &GrafanaService_InitOrganizations_Call{Call: _e.mock.On("InitOrganizations")}
}

func (_c *GrafanaService_InitOrganizations_Call) Run(run func()) *GrafanaService_InitOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_InitOrganizations_Call) Return() *GrafanaService_InitOrganizations_Call {
	_c.Call.Return()
	return _c
}

func (_c *GrafanaService_InitOrganizations_Call) RunAndReturn(run func()) *GrafanaService_InitOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// LintDashboards provides a mock function with given fields: req
func (_m *GrafanaService) LintDashboards(req types.LintRequest) []string {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for LintDashboards")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(types.LintRequest) []string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_LintDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LintDashboards'
type GrafanaService_LintDashboards_Call struct {
	*mock.Call
}

// LintDashboards is a helper method to define mock.On call
//   - req types.LintRequest
func (_e *GrafanaService_Expecter) LintDashboards(req interface{}) *GrafanaService_LintDashboards_Call {
	return &GrafanaService_LintDashboards_Call{Call: _e.mock.On("LintDashboards", req)}
}

func (_c *GrafanaService_LintDashboards_Call) Run(run func(req types.LintRequest)) *GrafanaService_LintDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.LintRequest))
	})
	return _c
}

func (_c *GrafanaService_LintDashboards_Call) Return(_a0 []string) *GrafanaService_LintDashboards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_LintDashboards_Call) RunAndReturn(run func(types.LintRequest) []string) *GrafanaService_LintDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// ListAPIKeys provides a mock function with given fields:
func (_m *GrafanaService) ListAPIKeys() []*models.APIKeyDTO {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAPIKeys")
	}

	var r0 []*models.APIKeyDTO
	if rf, ok := ret.Get(0).(func() []*models.APIKeyDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.APIKeyDTO)
		}
	}

	return r0
}

// GrafanaService_ListAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAPIKeys'
type GrafanaService_ListAPIKeys_Call struct {
	*mock.Call
}

// ListAPIKeys is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) ListAPIKeys() *GrafanaService_ListAPIKeys_Call {
	return &GrafanaService_ListAPIKeys_Call{Call: _e.mock.On("ListAPIKeys")}
}

func (_c *GrafanaService_ListAPIKeys_Call) Run(run func()) *GrafanaService_ListAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_ListAPIKeys_Call) Return(_a0 []*models.APIKeyDTO) *GrafanaService_ListAPIKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListAPIKeys_Call) RunAndReturn(run func() []*models.APIKeyDTO) *GrafanaService_ListAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) ListConnectionPermissions(filter filters.Filter) map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectionPermissions")
	}

	var r0 map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO)
		}
	}

	return r0
}

// GrafanaService_ListConnectionPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectionPermissions'
type GrafanaService_ListConnectionPermissions_Call struct {
	*mock.Call
}

// ListConnectionPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListConnectionPermissions(filter interface{}) *GrafanaService_ListConnectionPermissions_Call {
	return &GrafanaService_ListConnectionPermissions_Call{Call: _e.mock.On("ListConnectionPermissions", filter)}
}

func (_c *GrafanaService_ListConnectionPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListConnectionPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListConnectionPermissions_Call) Return(_a0 map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO) *GrafanaService_ListConnectionPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListConnectionPermissions_Call) RunAndReturn(run func(filters.Filter) map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO) *GrafanaService_ListConnectionPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnections provides a mock function with given fields: filter
func (_m *GrafanaService) ListConnections(filter filters.Filter) []models.DataSourceListItemDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListConnections")
	}

	var r0 []models.DataSourceListItemDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []models.DataSourceListItemDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataSourceListItemDTO)
		}
	}

	return r0
}

// GrafanaService_ListConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnections'
type GrafanaService_ListConnections_Call struct {
	*mock.Call
}

// ListConnections is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListConnections(filter interface{}) *GrafanaService_ListConnections_Call {
	return &GrafanaService_ListConnections_Call{Call: _e.mock.On("ListConnections", filter)}
}

func (_c *GrafanaService_ListConnections_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListConnections_Call) Return(_a0 []models.DataSourceListItemDTO) *GrafanaService_ListConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListConnections_Call) RunAndReturn(run func(filters.Filter) []models.DataSourceListItemDTO) *GrafanaService_ListConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) ListDashboards(filter filters.Filter) []*models.Hit {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboards")
	}

	var r0 []*models.Hit
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.Hit); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Hit)
		}
	}

	return r0
}

// GrafanaService_ListDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDashboards'
type GrafanaService_ListDashboards_Call struct {
	*mock.Call
}

// ListDashboards is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListDashboards(filter interface{}) *GrafanaService_ListDashboards_Call {
	return &GrafanaService_ListDashboards_Call{Call: _e.mock.On("ListDashboards", filter)}
}

func (_c *GrafanaService_ListDashboards_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListDashboards_Call) Return(_a0 []*models.Hit) *GrafanaService_ListDashboards_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListDashboards_Call) RunAndReturn(run func(filters.Filter) []*models.Hit) *GrafanaService_ListDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// ListFolder provides a mock function with given fields: filter
func (_m *GrafanaService) ListFolder(filter filters.Filter) []*models.Hit {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListFolder")
	}

	var r0 []*models.Hit
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.Hit); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Hit)
		}
	}

	return r0
}

// GrafanaService_ListFolder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFolder'
type GrafanaService_ListFolder_Call struct {
	*mock.Call
}

// ListFolder is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListFolder(filter interface{}) *GrafanaService_ListFolder_Call {
	return &GrafanaService_ListFolder_Call{Call: _e.mock.On("ListFolder", filter)}
}

func (_c *GrafanaService_ListFolder_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListFolder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListFolder_Call) Return(_a0 []*models.Hit) *GrafanaService_ListFolder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListFolder_Call) RunAndReturn(run func(filters.Filter) []*models.Hit) *GrafanaService_ListFolder_Call {
	_c.Call.Return(run)
	return _c
}

// ListFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) ListFolderPermissions(filter filters.Filter) map[*models.Hit][]*models.DashboardACLInfoDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListFolderPermissions")
	}

	var r0 map[*models.Hit][]*models.DashboardACLInfoDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.Hit][]*models.DashboardACLInfoDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.Hit][]*models.DashboardACLInfoDTO)
		}
	}

	return r0
}

// GrafanaService_ListFolderPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFolderPermissions'
type GrafanaService_ListFolderPermissions_Call struct {
	*mock.Call
}

// ListFolderPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListFolderPermissions(filter interface{}) *GrafanaService_ListFolderPermissions_Call {
	return &GrafanaService_ListFolderPermissions_Call{Call: _e.mock.On("ListFolderPermissions", filter)}
}

func (_c *GrafanaService_ListFolderPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListFolderPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListFolderPermissions_Call) Return(_a0 map[*models.Hit][]*models.DashboardACLInfoDTO) *GrafanaService_ListFolderPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListFolderPermissions_Call) RunAndReturn(run func(filters.Filter) map[*models.Hit][]*models.DashboardACLInfoDTO) *GrafanaService_ListFolderPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) ListLibraryElements(filter filters.Filter) []*models.LibraryElementDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListLibraryElements")
	}

	var r0 []*models.LibraryElementDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.LibraryElementDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LibraryElementDTO)
		}
	}

	return r0
}

// GrafanaService_ListLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElements'
type GrafanaService_ListLibraryElements_Call struct {
	*mock.Call
}

// ListLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListLibraryElements(filter interface{}) *GrafanaService_ListLibraryElements_Call {
	return &GrafanaService_ListLibraryElements_Call{Call: _e.mock.On("ListLibraryElements", filter)}
}

func (_c *GrafanaService_ListLibraryElements_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListLibraryElements_Call) Return(_a0 []*models.LibraryElementDTO) *GrafanaService_ListLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListLibraryElements_Call) RunAndReturn(run func(filters.Filter) []*models.LibraryElementDTO) *GrafanaService_ListLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// ListLibraryElementsConnections provides a mock function with given fields: filter, connectionID
func (_m *GrafanaService) ListLibraryElementsConnections(filter filters.Filter, connectionID string) []*models.DashboardFullWithMeta {
	ret := _m.Called(filter, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for ListLibraryElementsConnections")
	}

	var r0 []*models.DashboardFullWithMeta
	if rf, ok := ret.Get(0).(func(filters.Filter, string) []*models.DashboardFullWithMeta); ok {
		r0 = rf(filter, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DashboardFullWithMeta)
		}
	}

	return r0
}

// GrafanaService_ListLibraryElementsConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLibraryElementsConnections'
type GrafanaService_ListLibraryElementsConnections_Call struct {
	*mock.Call
}

// ListLibraryElementsConnections is a helper method to define mock.On call
//   - filter filters.Filter
//   - connectionID string
func (_e *GrafanaService_Expecter) ListLibraryElementsConnections(filter interface{}, connectionID interface{}) *GrafanaService_ListLibraryElementsConnections_Call {
	return &GrafanaService_ListLibraryElementsConnections_Call{Call: _e.mock.On("ListLibraryElementsConnections", filter, connectionID)}
}

func (_c *GrafanaService_ListLibraryElementsConnections_Call) Run(run func(filter filters.Filter, connectionID string)) *GrafanaService_ListLibraryElementsConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter), args[1].(string))
	})
	return _c
}

func (_c *GrafanaService_ListLibraryElementsConnections_Call) Return(_a0 []*models.DashboardFullWithMeta) *GrafanaService_ListLibraryElementsConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListLibraryElementsConnections_Call) RunAndReturn(run func(filters.Filter, string) []*models.DashboardFullWithMeta) *GrafanaService_ListLibraryElementsConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrgUsers provides a mock function with given fields: orgId
func (_m *GrafanaService) ListOrgUsers(orgId int64) []*models.OrgUserDTO {
	ret := _m.Called(orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListOrgUsers")
	}

	var r0 []*models.OrgUserDTO
	if rf, ok := ret.Get(0).(func(int64) []*models.OrgUserDTO); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrgUserDTO)
		}
	}

	return r0
}

// GrafanaService_ListOrgUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrgUsers'
type GrafanaService_ListOrgUsers_Call struct {
	*mock.Call
}

// ListOrgUsers is a helper method to define mock.On call
//   - orgId int64
func (_e *GrafanaService_Expecter) ListOrgUsers(orgId interface{}) *GrafanaService_ListOrgUsers_Call {
	return &GrafanaService_ListOrgUsers_Call{Call: _e.mock.On("ListOrgUsers", orgId)}
}

func (_c *GrafanaService_ListOrgUsers_Call) Run(run func(orgId int64)) *GrafanaService_ListOrgUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GrafanaService_ListOrgUsers_Call) Return(_a0 []*models.OrgUserDTO) *GrafanaService_ListOrgUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListOrgUsers_Call) RunAndReturn(run func(int64) []*models.OrgUserDTO) *GrafanaService_ListOrgUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function with given fields: filter
func (_m *GrafanaService) ListOrganizations(filter filters.Filter) []*internaltypes.OrgsDTOWithPreferences {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 []*internaltypes.OrgsDTOWithPreferences
	if rf, ok := ret.Get(0).(func(filters.Filter) []*internaltypes.OrgsDTOWithPreferences); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internaltypes.OrgsDTOWithPreferences)
		}
	}

	return r0
}

// GrafanaService_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type GrafanaService_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListOrganizations(filter interface{}) *GrafanaService_ListOrganizations_Call {
	return &GrafanaService_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations", filter)}
}

func (_c *GrafanaService_ListOrganizations_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListOrganizations_Call) Return(_a0 []*internaltypes.OrgsDTOWithPreferences) *GrafanaService_ListOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListOrganizations_Call) RunAndReturn(run func(filters.Filter) []*internaltypes.OrgsDTOWithPreferences) *GrafanaService_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccounts provides a mock function with given fields:
func (_m *GrafanaService) ListServiceAccounts() []*internaltypes.ServiceAccountDTOWithTokens {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccounts")
	}

	var r0 []*internaltypes.ServiceAccountDTOWithTokens
	if rf, ok := ret.Get(0).(func() []*internaltypes.ServiceAccountDTOWithTokens); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*internaltypes.ServiceAccountDTOWithTokens)
		}
	}

	return r0
}

// GrafanaService_ListServiceAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccounts'
type GrafanaService_ListServiceAccounts_Call struct {
	*mock.Call
}

// ListServiceAccounts is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) ListServiceAccounts() *GrafanaService_ListServiceAccounts_Call {
	return &GrafanaService_ListServiceAccounts_Call{Call: _e.mock.On("ListServiceAccounts")}
}

func (_c *GrafanaService_ListServiceAccounts_Call) Run(run func()) *GrafanaService_ListServiceAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_ListServiceAccounts_Call) Return(_a0 []*internaltypes.ServiceAccountDTOWithTokens) *GrafanaService_ListServiceAccounts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListServiceAccounts_Call) RunAndReturn(run func() []*internaltypes.ServiceAccountDTOWithTokens) *GrafanaService_ListServiceAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListServiceAccountsTokens provides a mock function with given fields: id
func (_m *GrafanaService) ListServiceAccountsTokens(id int64) ([]*models.TokenDTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceAccountsTokens")
	}

	var r0 []*models.TokenDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*models.TokenDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []*models.TokenDTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TokenDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_ListServiceAccountsTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServiceAccountsTokens'
type GrafanaService_ListServiceAccountsTokens_Call struct {
	*mock.Call
}

// ListServiceAccountsTokens is a helper method to define mock.On call
//   - id int64
func (_e *GrafanaService_Expecter) ListServiceAccountsTokens(id interface{}) *GrafanaService_ListServiceAccountsTokens_Call {
	return &GrafanaService_ListServiceAccountsTokens_Call{Call: _e.mock.On("ListServiceAccountsTokens", id)}
}

func (_c *GrafanaService_ListServiceAccountsTokens_Call) Run(run func(id int64)) *GrafanaService_ListServiceAccountsTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GrafanaService_ListServiceAccountsTokens_Call) Return(_a0 []*models.TokenDTO, _a1 error) *GrafanaService_ListServiceAccountsTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_ListServiceAccountsTokens_Call) RunAndReturn(run func(int64) ([]*models.TokenDTO, error)) *GrafanaService_ListServiceAccountsTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ListTeams provides a mock function with given fields: filter
func (_m *GrafanaService) ListTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListTeams")
	}

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// GrafanaService_ListTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTeams'
type GrafanaService_ListTeams_Call struct {
	*mock.Call
}

// ListTeams is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListTeams(filter interface{}) *GrafanaService_ListTeams_Call {
	return &GrafanaService_ListTeams_Call{Call: _e.mock.On("ListTeams", filter)}
}

func (_c *GrafanaService_ListTeams_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListTeams_Call) Return(_a0 map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_ListTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListTeams_Call) RunAndReturn(run func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_ListTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserOrganizations provides a mock function with given fields:
func (_m *GrafanaService) ListUserOrganizations() ([]*models.UserOrgDTO, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListUserOrganizations")
	}

	var r0 []*models.UserOrgDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.UserOrgDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.UserOrgDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserOrgDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_ListUserOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserOrganizations'
type GrafanaService_ListUserOrganizations_Call struct {
	*mock.Call
}

// ListUserOrganizations is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) ListUserOrganizations() *GrafanaService_ListUserOrganizations_Call {
	return &GrafanaService_ListUserOrganizations_Call{Call: _e.mock.On("ListUserOrganizations")}
}

func (_c *GrafanaService_ListUserOrganizations_Call) Run(run func()) *GrafanaService_ListUserOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_ListUserOrganizations_Call) Return(_a0 []*models.UserOrgDTO, _a1 error) *GrafanaService_ListUserOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_ListUserOrganizations_Call) RunAndReturn(run func() ([]*models.UserOrgDTO, error)) *GrafanaService_ListUserOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: filter
func (_m *GrafanaService) ListUsers(filter filters.Filter) []*models.UserSearchHitDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*models.UserSearchHitDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.UserSearchHitDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserSearchHitDTO)
		}
	}

	return r0
}

// GrafanaService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type GrafanaService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) ListUsers(filter interface{}) *GrafanaService_ListUsers_Call {
	return &GrafanaService_ListUsers_Call{Call: _e.mock.On("ListUsers", filter)}
}

func (_c *GrafanaService_ListUsers_Call) Run(run func(filter filters.Filter)) *GrafanaService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_ListUsers_Call) Return(_a0 []*models.UserSearchHitDTO) *GrafanaService_ListUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_ListUsers_Call) RunAndReturn(run func(filters.Filter) []*models.UserSearchHitDTO) *GrafanaService_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields:
func (_m *GrafanaService) Login() {
	_m.Called()
}

// GrafanaService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type GrafanaService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
func (_e *GrafanaService_Expecter) Login() *GrafanaService_Login_Call {
	return &GrafanaService_Login_Call{Call: _e.mock.On("Login")}
}

func (_c *GrafanaService_Login_Call) Run(run func()) *GrafanaService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GrafanaService_Login_Call) Return() *GrafanaService_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *GrafanaService_Login_Call) RunAndReturn(run func()) *GrafanaService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteUser provides a mock function with given fields: userLogin
func (_m *GrafanaService) PromoteUser(userLogin string) (string, error) {
	ret := _m.Called(userLogin)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userLogin)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userLogin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrafanaService_PromoteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteUser'
type GrafanaService_PromoteUser_Call struct {
	*mock.Call
}

// PromoteUser is a helper method to define mock.On call
//   - userLogin string
func (_e *GrafanaService_Expecter) PromoteUser(userLogin interface{}) *GrafanaService_PromoteUser_Call {
	return &GrafanaService_PromoteUser_Call{Call: _e.mock.On("PromoteUser", userLogin)}
}

func (_c *GrafanaService_PromoteUser_Call) Run(run func(userLogin string)) *GrafanaService_PromoteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GrafanaService_PromoteUser_Call) Return(_a0 string, _a1 error) *GrafanaService_PromoteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrafanaService_PromoteUser_Call) RunAndReturn(run func(string) (string, error)) *GrafanaService_PromoteUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetOrganizationByName provides a mock function with given fields: name, useSlug
func (_m *GrafanaService) SetOrganizationByName(name string, useSlug bool) error {
	ret := _m.Called(name, useSlug)

	if len(ret) == 0 {
		panic("no return value specified for SetOrganizationByName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, useSlug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_SetOrganizationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrganizationByName'
type GrafanaService_SetOrganizationByName_Call struct {
	*mock.Call
}

// SetOrganizationByName is a helper method to define mock.On call
//   - name string
//   - useSlug bool
func (_e *GrafanaService_Expecter) SetOrganizationByName(name interface{}, useSlug interface{}) *GrafanaService_SetOrganizationByName_Call {
	return &GrafanaService_SetOrganizationByName_Call{Call: _e.mock.On("SetOrganizationByName", name, useSlug)}
}

func (_c *GrafanaService_SetOrganizationByName_Call) Run(run func(name string, useSlug bool)) *GrafanaService_SetOrganizationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *GrafanaService_SetOrganizationByName_Call) Return(_a0 error) *GrafanaService_SetOrganizationByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_SetOrganizationByName_Call) RunAndReturn(run func(string, bool) error) *GrafanaService_SetOrganizationByName_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserOrganizations provides a mock function with given fields: id
func (_m *GrafanaService) SetUserOrganizations(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetUserOrganizations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_SetUserOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserOrganizations'
type GrafanaService_SetUserOrganizations_Call struct {
	*mock.Call
}

// SetUserOrganizations is a helper method to define mock.On call
//   - id int64
func (_e *GrafanaService_Expecter) SetUserOrganizations(id interface{}) *GrafanaService_SetUserOrganizations_Call {
	return &GrafanaService_SetUserOrganizations_Call{Call: _e.mock.On("SetUserOrganizations", id)}
}

func (_c *GrafanaService_SetUserOrganizations_Call) Run(run func(id int64)) *GrafanaService_SetUserOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GrafanaService_SetUserOrganizations_Call) Return(_a0 error) *GrafanaService_SetUserOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_SetUserOrganizations_Call) RunAndReturn(run func(int64) error) *GrafanaService_SetUserOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserInOrg provides a mock function with given fields: role, orgSlug, userId
func (_m *GrafanaService) UpdateUserInOrg(role string, orgSlug string, userId int64) error {
	ret := _m.Called(role, orgSlug, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserInOrg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int64) error); ok {
		r0 = rf(role, orgSlug, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_UpdateUserInOrg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserInOrg'
type GrafanaService_UpdateUserInOrg_Call struct {
	*mock.Call
}

// UpdateUserInOrg is a helper method to define mock.On call
//   - role string
//   - orgSlug string
//   - userId int64
func (_e *GrafanaService_Expecter) UpdateUserInOrg(role interface{}, orgSlug interface{}, userId interface{}) *GrafanaService_UpdateUserInOrg_Call {
	return &GrafanaService_UpdateUserInOrg_Call{Call: _e.mock.On("UpdateUserInOrg", role, orgSlug, userId)}
}

func (_c *GrafanaService_UpdateUserInOrg_Call) Run(run func(role string, orgSlug string, userId int64)) *GrafanaService_UpdateUserInOrg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *GrafanaService_UpdateUserInOrg_Call) Return(_a0 error) *GrafanaService_UpdateUserInOrg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UpdateUserInOrg_Call) RunAndReturn(run func(string, string, int64) error) *GrafanaService_UpdateUserInOrg_Call {
	_c.Call.Return(run)
	return _c
}

// UploadConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) UploadConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadConnectionPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadConnectionPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadConnectionPermissions'
type GrafanaService_UploadConnectionPermissions_Call struct {
	*mock.Call
}

// UploadConnectionPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadConnectionPermissions(filter interface{}) *GrafanaService_UploadConnectionPermissions_Call {
	return &GrafanaService_UploadConnectionPermissions_Call{Call: _e.mock.On("UploadConnectionPermissions", filter)}
}

func (_c *GrafanaService_UploadConnectionPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadConnectionPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadConnectionPermissions_Call) Return(_a0 []string) *GrafanaService_UploadConnectionPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadConnectionPermissions_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadConnectionPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UploadConnections provides a mock function with given fields: filter
func (_m *GrafanaService) UploadConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadConnections")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadConnections'
type GrafanaService_UploadConnections_Call struct {
	*mock.Call
}

// UploadConnections is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadConnections(filter interface{}) *GrafanaService_UploadConnections_Call {
	return &GrafanaService_UploadConnections_Call{Call: _e.mock.On("UploadConnections", filter)}
}

func (_c *GrafanaService_UploadConnections_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadConnections_Call) Return(_a0 []string) *GrafanaService_UploadConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadConnections_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadConnections_Call {
	_c.Call.Return(run)
	return _c
}

// UploadDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) UploadDashboards(filter filters.Filter) {
	_m.Called(filter)
}

// GrafanaService_UploadDashboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadDashboards'
type GrafanaService_UploadDashboards_Call struct {
	*mock.Call
}

// UploadDashboards is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadDashboards(filter interface{}) *GrafanaService_UploadDashboards_Call {
	return &GrafanaService_UploadDashboards_Call{Call: _e.mock.On("UploadDashboards", filter)}
}

func (_c *GrafanaService_UploadDashboards_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadDashboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadDashboards_Call) Return() *GrafanaService_UploadDashboards_Call {
	_c.Call.Return()
	return _c
}

func (_c *GrafanaService_UploadDashboards_Call) RunAndReturn(run func(filters.Filter)) *GrafanaService_UploadDashboards_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) UploadFolderPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadFolderPermissions")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadFolderPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFolderPermissions'
type GrafanaService_UploadFolderPermissions_Call struct {
	*mock.Call
}

// UploadFolderPermissions is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadFolderPermissions(filter interface{}) *GrafanaService_UploadFolderPermissions_Call {
	return &GrafanaService_UploadFolderPermissions_Call{Call: _e.mock.On("UploadFolderPermissions", filter)}
}

func (_c *GrafanaService_UploadFolderPermissions_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadFolderPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadFolderPermissions_Call) Return(_a0 []string) *GrafanaService_UploadFolderPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadFolderPermissions_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadFolderPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFolders provides a mock function with given fields: filter
func (_m *GrafanaService) UploadFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadFolders")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadFolders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFolders'
type GrafanaService_UploadFolders_Call struct {
	*mock.Call
}

// UploadFolders is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadFolders(filter interface{}) *GrafanaService_UploadFolders_Call {
	return &GrafanaService_UploadFolders_Call{Call: _e.mock.On("UploadFolders", filter)}
}

func (_c *GrafanaService_UploadFolders_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadFolders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadFolders_Call) Return(_a0 []string) *GrafanaService_UploadFolders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadFolders_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadFolders_Call {
	_c.Call.Return(run)
	return _c
}

// UploadLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) UploadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadLibraryElements")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadLibraryElements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadLibraryElements'
type GrafanaService_UploadLibraryElements_Call struct {
	*mock.Call
}

// UploadLibraryElements is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadLibraryElements(filter interface{}) *GrafanaService_UploadLibraryElements_Call {
	return &GrafanaService_UploadLibraryElements_Call{Call: _e.mock.On("UploadLibraryElements", filter)}
}

func (_c *GrafanaService_UploadLibraryElements_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadLibraryElements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadLibraryElements_Call) Return(_a0 []string) *GrafanaService_UploadLibraryElements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadLibraryElements_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadLibraryElements_Call {
	_c.Call.Return(run)
	return _c
}

// UploadOrgPreferences provides a mock function with given fields: orgName, pref
func (_m *GrafanaService) UploadOrgPreferences(orgName string, pref *models.Preferences) error {
	ret := _m.Called(orgName, pref)

	if len(ret) == 0 {
		panic("no return value specified for UploadOrgPreferences")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Preferences) error); ok {
		r0 = rf(orgName, pref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrafanaService_UploadOrgPreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadOrgPreferences'
type GrafanaService_UploadOrgPreferences_Call struct {
	*mock.Call
}

// UploadOrgPreferences is a helper method to define mock.On call
//   - orgName string
//   - pref *models.Preferences
func (_e *GrafanaService_Expecter) UploadOrgPreferences(orgName interface{}, pref interface{}) *GrafanaService_UploadOrgPreferences_Call {
	return &GrafanaService_UploadOrgPreferences_Call{Call: _e.mock.On("UploadOrgPreferences", orgName, pref)}
}

func (_c *GrafanaService_UploadOrgPreferences_Call) Run(run func(orgName string, pref *models.Preferences)) *GrafanaService_UploadOrgPreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Preferences))
	})
	return _c
}

func (_c *GrafanaService_UploadOrgPreferences_Call) Return(_a0 error) *GrafanaService_UploadOrgPreferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadOrgPreferences_Call) RunAndReturn(run func(string, *models.Preferences) error) *GrafanaService_UploadOrgPreferences_Call {
	_c.Call.Return(run)
	return _c
}

// UploadOrganizations provides a mock function with given fields: filter
func (_m *GrafanaService) UploadOrganizations(filter filters.Filter) []string {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadOrganizations")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GrafanaService_UploadOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadOrganizations'
type GrafanaService_UploadOrganizations_Call struct {
	*mock.Call
}

// UploadOrganizations is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadOrganizations(filter interface{}) *GrafanaService_UploadOrganizations_Call {
	return &GrafanaService_UploadOrganizations_Call{Call: _e.mock.On("UploadOrganizations", filter)}
}

func (_c *GrafanaService_UploadOrganizations_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadOrganizations_Call) Return(_a0 []string) *GrafanaService_UploadOrganizations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadOrganizations_Call) RunAndReturn(run func(filters.Filter) []string) *GrafanaService_UploadOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// UploadTeams provides a mock function with given fields: filter
func (_m *GrafanaService) UploadTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadTeams")
	}

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// GrafanaService_UploadTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadTeams'
type GrafanaService_UploadTeams_Call struct {
	*mock.Call
}

// UploadTeams is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadTeams(filter interface{}) *GrafanaService_UploadTeams_Call {
	return &GrafanaService_UploadTeams_Call{Call: _e.mock.On("UploadTeams", filter)}
}

func (_c *GrafanaService_UploadTeams_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadTeams_Call) Return(_a0 map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_UploadTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadTeams_Call) RunAndReturn(run func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO) *GrafanaService_UploadTeams_Call {
	_c.Call.Return(run)
	return _c
}

// UploadUsers provides a mock function with given fields: filter
func (_m *GrafanaService) UploadUsers(filter filters.Filter) []internaltypes.UserProfileWithAuth {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for UploadUsers")
	}

	var r0 []internaltypes.UserProfileWithAuth
	if rf, ok := ret.Get(0).(func(filters.Filter) []internaltypes.UserProfileWithAuth); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]internaltypes.UserProfileWithAuth)
		}
	}

	return r0
}

// GrafanaService_UploadUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadUsers'
type GrafanaService_UploadUsers_Call struct {
	*mock.Call
}

// UploadUsers is a helper method to define mock.On call
//   - filter filters.Filter
func (_e *GrafanaService_Expecter) UploadUsers(filter interface{}) *GrafanaService_UploadUsers_Call {
	return &GrafanaService_UploadUsers_Call{Call: _e.mock.On("UploadUsers", filter)}
}

func (_c *GrafanaService_UploadUsers_Call) Run(run func(filter filters.Filter)) *GrafanaService_UploadUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filters.Filter))
	})
	return _c
}

func (_c *GrafanaService_UploadUsers_Call) Return(_a0 []internaltypes.UserProfileWithAuth) *GrafanaService_UploadUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GrafanaService_UploadUsers_Call) RunAndReturn(run func(filters.Filter) []internaltypes.UserProfileWithAuth) *GrafanaService_UploadUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewGrafanaService creates a new instance of GrafanaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrafanaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrafanaService {
	mock := &GrafanaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
