// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	api "github.com/esnet/gdg/internal/api"
	filters "github.com/esnet/gdg/internal/service/filters"
	mock "github.com/stretchr/testify/mock"

	models "github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GrafanaService is an autogenerated mock type for the GrafanaService type
type GrafanaService struct {
	mock.Mock
}

// AddUserToOrg provides a mock function with given fields: role, userId, orgId
func (_m *GrafanaService) AddUserToOrg(role string, userId int64, orgId int64) error {
	ret := _m.Called(role, userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(role, userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAPIKey provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateAPIKey(name string, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccount provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateServiceAccount(name string, role string, expiration int64) (*models.ServiceAccountDTO, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.ServiceAccountDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*models.ServiceAccountDTO, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *models.ServiceAccountDTO); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ServiceAccountDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAccountToken provides a mock function with given fields: name, role, expiration
func (_m *GrafanaService) CreateServiceAccountToken(name int64, role string, expiration int64) (*models.NewAPIKeyResult, error) {
	ret := _m.Called(name, role, expiration)

	var r0 *models.NewAPIKeyResult
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, int64) (*models.NewAPIKeyResult, error)); ok {
		return rf(name, role, expiration)
	}
	if rf, ok := ret.Get(0).(func(int64, string, int64) *models.NewAPIKeyResult); ok {
		r0 = rf(name, role, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NewAPIKeyResult)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, int64) error); ok {
		r1 = rf(name, role, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllAlertNotifications provides a mock function with given fields:
func (_m *GrafanaService) DeleteAllAlertNotifications() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllConnections provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllDashboards(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllFolders provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllServiceAccounts provides a mock function with given fields:
func (_m *GrafanaService) DeleteAllServiceAccounts() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllTokens provides a mock function with given fields:
func (_m *GrafanaService) DeleteAllTokens() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteAllUsers provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteAllUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteServiceAccountTokens provides a mock function with given fields: serviceId
func (_m *GrafanaService) DeleteServiceAccountTokens(serviceId int64) []string {
	ret := _m.Called(serviceId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int64) []string); ok {
		r0 = rf(serviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DeleteTeam provides a mock function with given fields: filter
func (_m *GrafanaService) DeleteTeam(filter filters.Filter) ([]*models.TeamDTO, error) {
	ret := _m.Called(filter)

	var r0 []*models.TeamDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(filters.Filter) ([]*models.TeamDTO, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.TeamDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TeamDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(filters.Filter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserFromOrg provides a mock function with given fields: userId, orgId
func (_m *GrafanaService) DeleteUserFromOrg(userId int64, orgId int64) error {
	ret := _m.Called(userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadAlertNotifications provides a mock function with given fields:
func (_m *GrafanaService) DownloadAlertNotifications() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadConnections provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadDashboards(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadFolderPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadFolders provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadOrganizations provides a mock function with given fields:
func (_m *GrafanaService) DownloadOrganizations() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DownloadTeams provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// DownloadUsers provides a mock function with given fields: filter
func (_m *GrafanaService) DownloadUsers(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetServerInfo provides a mock function with given fields:
func (_m *GrafanaService) GetServerInfo() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetTokenOrganization provides a mock function with given fields:
func (_m *GrafanaService) GetTokenOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// GetUserInfo provides a mock function with given fields:
func (_m *GrafanaService) GetUserInfo() (*models.UserProfileDTO, error) {
	ret := _m.Called()

	var r0 *models.UserProfileDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.UserProfileDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.UserProfileDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserProfileDTO)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserOrganization provides a mock function with given fields:
func (_m *GrafanaService) GetUserOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// InitOrganizations provides a mock function with given fields:
func (_m *GrafanaService) InitOrganizations() {
	_m.Called()
}

// ListAPIKeys provides a mock function with given fields:
func (_m *GrafanaService) ListAPIKeys() []*models.APIKeyDTO {
	ret := _m.Called()

	var r0 []*models.APIKeyDTO
	if rf, ok := ret.Get(0).(func() []*models.APIKeyDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.APIKeyDTO)
		}
	}

	return r0
}

// ListAlertNotifications provides a mock function with given fields:
func (_m *GrafanaService) ListAlertNotifications() []*models.AlertNotification {
	ret := _m.Called()

	var r0 []*models.AlertNotification
	if rf, ok := ret.Get(0).(func() []*models.AlertNotification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AlertNotification)
		}
	}

	return r0
}

// ListConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) ListConnectionPermissions(filter filters.Filter) map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO {
	ret := _m.Called(filter)

	var r0 map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.DataSourceListItemDTO]*models.DataSourcePermissionsDTO)
		}
	}

	return r0
}

// ListConnections provides a mock function with given fields: filter
func (_m *GrafanaService) ListConnections(filter filters.Filter) []models.DataSourceListItemDTO {
	ret := _m.Called(filter)

	var r0 []models.DataSourceListItemDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []models.DataSourceListItemDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DataSourceListItemDTO)
		}
	}

	return r0
}

// ListDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) ListDashboards(filter filters.Filter) []*models.Hit {
	ret := _m.Called(filter)

	var r0 []*models.Hit
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.Hit); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Hit)
		}
	}

	return r0
}

// ListFolder provides a mock function with given fields: filter
func (_m *GrafanaService) ListFolder(filter filters.Filter) []*models.Hit {
	ret := _m.Called(filter)

	var r0 []*models.Hit
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.Hit); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Hit)
		}
	}

	return r0
}

// ListFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) ListFolderPermissions(filter filters.Filter) map[*models.Hit][]*models.DashboardACLInfoDTO {
	ret := _m.Called(filter)

	var r0 map[*models.Hit][]*models.DashboardACLInfoDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.Hit][]*models.DashboardACLInfoDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.Hit][]*models.DashboardACLInfoDTO)
		}
	}

	return r0
}

// ListLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) ListLibraryElements(filter filters.Filter) []*models.LibraryElementDTO {
	ret := _m.Called(filter)

	var r0 []*models.LibraryElementDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.LibraryElementDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.LibraryElementDTO)
		}
	}

	return r0
}

// ListLibraryElementsConnections provides a mock function with given fields: filter, connectionID
func (_m *GrafanaService) ListLibraryElementsConnections(filter filters.Filter, connectionID string) []*models.DashboardFullWithMeta {
	ret := _m.Called(filter, connectionID)

	var r0 []*models.DashboardFullWithMeta
	if rf, ok := ret.Get(0).(func(filters.Filter, string) []*models.DashboardFullWithMeta); ok {
		r0 = rf(filter, connectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DashboardFullWithMeta)
		}
	}

	return r0
}

// ListOrgUsers provides a mock function with given fields: orgId
func (_m *GrafanaService) ListOrgUsers(orgId int64) []*models.OrgUserDTO {
	ret := _m.Called(orgId)

	var r0 []*models.OrgUserDTO
	if rf, ok := ret.Get(0).(func(int64) []*models.OrgUserDTO); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrgUserDTO)
		}
	}

	return r0
}

// ListOrganizations provides a mock function with given fields:
func (_m *GrafanaService) ListOrganizations() []*models.OrgDTO {
	ret := _m.Called()

	var r0 []*models.OrgDTO
	if rf, ok := ret.Get(0).(func() []*models.OrgDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrgDTO)
		}
	}

	return r0
}

// ListServiceAccounts provides a mock function with given fields:
func (_m *GrafanaService) ListServiceAccounts() []*api.ServiceAccountDTOWithTokens {
	ret := _m.Called()

	var r0 []*api.ServiceAccountDTOWithTokens
	if rf, ok := ret.Get(0).(func() []*api.ServiceAccountDTOWithTokens); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.ServiceAccountDTOWithTokens)
		}
	}

	return r0
}

// ListServiceAccountsTokens provides a mock function with given fields: id
func (_m *GrafanaService) ListServiceAccountsTokens(id int64) ([]*models.TokenDTO, error) {
	ret := _m.Called(id)

	var r0 []*models.TokenDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*models.TokenDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) []*models.TokenDTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TokenDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields: filter
func (_m *GrafanaService) ListTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// ListUsers provides a mock function with given fields: filter
func (_m *GrafanaService) ListUsers(filter filters.Filter) []*models.UserSearchHitDTO {
	ret := _m.Called(filter)

	var r0 []*models.UserSearchHitDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []*models.UserSearchHitDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserSearchHitDTO)
		}
	}

	return r0
}

// Login provides a mock function with given fields:
func (_m *GrafanaService) Login() {
	_m.Called()
}

// PromoteUser provides a mock function with given fields: userLogin
func (_m *GrafanaService) PromoteUser(userLogin string) (string, error) {
	ret := _m.Called(userLogin)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userLogin)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userLogin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOrganization provides a mock function with given fields: id
func (_m *GrafanaService) SetOrganization(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserOrganizations provides a mock function with given fields: id
func (_m *GrafanaService) SetUserOrganizations(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserInOrg provides a mock function with given fields: role, userId, orgId
func (_m *GrafanaService) UpdateUserInOrg(role string, userId int64, orgId int64) error {
	ret := _m.Called(role, userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(role, userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadAlertNotifications provides a mock function with given fields:
func (_m *GrafanaService) UploadAlertNotifications() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadConnectionPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) UploadConnectionPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadConnections provides a mock function with given fields: filter
func (_m *GrafanaService) UploadConnections(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadDashboards provides a mock function with given fields: filter
func (_m *GrafanaService) UploadDashboards(filter filters.Filter) {
	_m.Called(filter)
}

// UploadFolderPermissions provides a mock function with given fields: filter
func (_m *GrafanaService) UploadFolderPermissions(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadFolders provides a mock function with given fields: filter
func (_m *GrafanaService) UploadFolders(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadLibraryElements provides a mock function with given fields: filter
func (_m *GrafanaService) UploadLibraryElements(filter filters.Filter) []string {
	ret := _m.Called(filter)

	var r0 []string
	if rf, ok := ret.Get(0).(func(filters.Filter) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadOrganizations provides a mock function with given fields:
func (_m *GrafanaService) UploadOrganizations() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadTeams provides a mock function with given fields: filter
func (_m *GrafanaService) UploadTeams(filter filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO {
	ret := _m.Called(filter)

	var r0 map[*models.TeamDTO][]*models.TeamMemberDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) map[*models.TeamDTO][]*models.TeamMemberDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*models.TeamDTO][]*models.TeamMemberDTO)
		}
	}

	return r0
}

// UploadUsers provides a mock function with given fields: filter
func (_m *GrafanaService) UploadUsers(filter filters.Filter) []models.UserProfileDTO {
	ret := _m.Called(filter)

	var r0 []models.UserProfileDTO
	if rf, ok := ret.Get(0).(func(filters.Filter) []models.UserProfileDTO); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserProfileDTO)
		}
	}

	return r0
}

// NewGrafanaService creates a new instance of GrafanaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrafanaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrafanaService {
	mock := &GrafanaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
