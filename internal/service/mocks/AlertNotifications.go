// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/grafana/grafana-openapi-client-go/models"
	mock "github.com/stretchr/testify/mock"
)

// NewAlertNotifications creates a new instance of AlertNotifications. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertNotifications(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertNotifications {
	mock := &AlertNotifications{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AlertNotifications is an autogenerated mock type for the AlertNotifications type
type AlertNotifications struct {
	mock.Mock
}

type AlertNotifications_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertNotifications) EXPECT() *AlertNotifications_Expecter {
	return &AlertNotifications_Expecter{mock: &_m.Mock}
}

// ClearAlertNotifications provides a mock function for the type AlertNotifications
func (_mock *AlertNotifications) ClearAlertNotifications() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearAlertNotifications")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// AlertNotifications_ClearAlertNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearAlertNotifications'
type AlertNotifications_ClearAlertNotifications_Call struct {
	*mock.Call
}

// ClearAlertNotifications is a helper method to define mock.On call
func (_e *AlertNotifications_Expecter) ClearAlertNotifications() *AlertNotifications_ClearAlertNotifications_Call {
	return &AlertNotifications_ClearAlertNotifications_Call{Call: _e.mock.On("ClearAlertNotifications")}
}

func (_c *AlertNotifications_ClearAlertNotifications_Call) Run(run func()) *AlertNotifications_ClearAlertNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertNotifications_ClearAlertNotifications_Call) Return(err error) *AlertNotifications_ClearAlertNotifications_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *AlertNotifications_ClearAlertNotifications_Call) RunAndReturn(run func() error) *AlertNotifications_ClearAlertNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAlertNotifications provides a mock function for the type AlertNotifications
func (_mock *AlertNotifications) DownloadAlertNotifications() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadAlertNotifications")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertNotifications_DownloadAlertNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAlertNotifications'
type AlertNotifications_DownloadAlertNotifications_Call struct {
	*mock.Call
}

// DownloadAlertNotifications is a helper method to define mock.On call
func (_e *AlertNotifications_Expecter) DownloadAlertNotifications() *AlertNotifications_DownloadAlertNotifications_Call {
	return &AlertNotifications_DownloadAlertNotifications_Call{Call: _e.mock.On("DownloadAlertNotifications")}
}

func (_c *AlertNotifications_DownloadAlertNotifications_Call) Run(run func()) *AlertNotifications_DownloadAlertNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertNotifications_DownloadAlertNotifications_Call) Return(s string, err error) *AlertNotifications_DownloadAlertNotifications_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *AlertNotifications_DownloadAlertNotifications_Call) RunAndReturn(run func() (string, error)) *AlertNotifications_DownloadAlertNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// ListAlertNotifications provides a mock function for the type AlertNotifications
func (_mock *AlertNotifications) ListAlertNotifications() (*models.Route, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAlertNotifications")
	}

	var r0 *models.Route
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.Route, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.Route); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Route)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertNotifications_ListAlertNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAlertNotifications'
type AlertNotifications_ListAlertNotifications_Call struct {
	*mock.Call
}

// ListAlertNotifications is a helper method to define mock.On call
func (_e *AlertNotifications_Expecter) ListAlertNotifications() *AlertNotifications_ListAlertNotifications_Call {
	return &AlertNotifications_ListAlertNotifications_Call{Call: _e.mock.On("ListAlertNotifications")}
}

func (_c *AlertNotifications_ListAlertNotifications_Call) Run(run func()) *AlertNotifications_ListAlertNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertNotifications_ListAlertNotifications_Call) Return(route *models.Route, err error) *AlertNotifications_ListAlertNotifications_Call {
	_c.Call.Return(route, err)
	return _c
}

func (_c *AlertNotifications_ListAlertNotifications_Call) RunAndReturn(run func() (*models.Route, error)) *AlertNotifications_ListAlertNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// UploadAlertNotifications provides a mock function for the type AlertNotifications
func (_mock *AlertNotifications) UploadAlertNotifications() (*models.Route, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UploadAlertNotifications")
	}

	var r0 *models.Route
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.Route, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.Route); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Route)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// AlertNotifications_UploadAlertNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadAlertNotifications'
type AlertNotifications_UploadAlertNotifications_Call struct {
	*mock.Call
}

// UploadAlertNotifications is a helper method to define mock.On call
func (_e *AlertNotifications_Expecter) UploadAlertNotifications() *AlertNotifications_UploadAlertNotifications_Call {
	return &AlertNotifications_UploadAlertNotifications_Call{Call: _e.mock.On("UploadAlertNotifications")}
}

func (_c *AlertNotifications_UploadAlertNotifications_Call) Run(run func()) *AlertNotifications_UploadAlertNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlertNotifications_UploadAlertNotifications_Call) Return(route *models.Route, err error) *AlertNotifications_UploadAlertNotifications_Call {
	_c.Call.Return(route, err)
	return _c
}

func (_c *AlertNotifications_UploadAlertNotifications_Call) RunAndReturn(run func() (*models.Route, error)) *AlertNotifications_UploadAlertNotifications_Call {
	_c.Call.Return(run)
	return _c
}
