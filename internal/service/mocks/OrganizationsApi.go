// Code generated by mockery v2.34.0. DO NOT EDIT.

package mocks

import (
	models "github.com/esnet/grafana-swagger-api-golang/goclient/models"
	mock "github.com/stretchr/testify/mock"
)

// OrganizationsApi is an autogenerated mock type for the OrganizationsApi type
type OrganizationsApi struct {
	mock.Mock
}

// AddUserToOrg provides a mock function with given fields: role, userId, orgId
func (_m *OrganizationsApi) AddUserToOrg(role string, userId int64, orgId int64) error {
	ret := _m.Called(role, userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(role, userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserFromOrg provides a mock function with given fields: userId, orgId
func (_m *OrganizationsApi) DeleteUserFromOrg(userId int64, orgId int64) error {
	ret := _m.Called(userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadOrganizations provides a mock function with given fields:
func (_m *OrganizationsApi) DownloadOrganizations() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetTokenOrganization provides a mock function with given fields:
func (_m *OrganizationsApi) GetTokenOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// GetUserOrganization provides a mock function with given fields:
func (_m *OrganizationsApi) GetUserOrganization() *models.OrgDetailsDTO {
	ret := _m.Called()

	var r0 *models.OrgDetailsDTO
	if rf, ok := ret.Get(0).(func() *models.OrgDetailsDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OrgDetailsDTO)
		}
	}

	return r0
}

// InitOrganizations provides a mock function with given fields:
func (_m *OrganizationsApi) InitOrganizations() {
	_m.Called()
}

// ListOrgUsers provides a mock function with given fields: orgId
func (_m *OrganizationsApi) ListOrgUsers(orgId int64) []*models.OrgUserDTO {
	ret := _m.Called(orgId)

	var r0 []*models.OrgUserDTO
	if rf, ok := ret.Get(0).(func(int64) []*models.OrgUserDTO); ok {
		r0 = rf(orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrgUserDTO)
		}
	}

	return r0
}

// ListOrganizations provides a mock function with given fields:
func (_m *OrganizationsApi) ListOrganizations() []*models.OrgDTO {
	ret := _m.Called()

	var r0 []*models.OrgDTO
	if rf, ok := ret.Get(0).(func() []*models.OrgDTO); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.OrgDTO)
		}
	}

	return r0
}

// SetOrganization provides a mock function with given fields: id
func (_m *OrganizationsApi) SetOrganization(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserOrganizations provides a mock function with given fields: id
func (_m *OrganizationsApi) SetUserOrganizations(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserInOrg provides a mock function with given fields: role, userId, orgId
func (_m *OrganizationsApi) UpdateUserInOrg(role string, userId int64, orgId int64) error {
	ret := _m.Called(role, userId, orgId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(role, userId, orgId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadOrganizations provides a mock function with given fields:
func (_m *OrganizationsApi) UploadOrganizations() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewOrganizationsApi creates a new instance of OrganizationsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationsApi {
	mock := &OrganizationsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
