<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GDG Docs on Grafana Dash-n-Go</title>
    <link>https://software.es.net/gdg/docs/</link>
    <description>Recent content in GDG Docs on Grafana Dash-n-Go</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://software.es.net/gdg/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installation</title>
      <link>https://software.es.net/gdg/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/installation/</guid>
      <description>Installation The easiest way to install GDG is to get one of the pre-compiled binaries from our release page which can be found here. Packages are not yet supported but will be coming soon since goreleaser has that feature.
Planned package support for:
HomeBrew Debian RPMs APK If you have go install you may run the following command to install gdg
1go install github.com/esnet/gdg@latest You can verify the version by running gdg version.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://software.es.net/gdg/docs/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/configuration/</guid>
      <description>Getting started This project requires Go to be installed. On OS X with Homebrew you can just run brew install go.
make a copy of conf/importer-example.yml and name it conf/importer.yml You&#39;ll need GRAFANA ADMINISTRATIVE privileges to proceed.
Authentication Authentication Token You can use an Authentication Token / API Key to authenticate with the Grafana API, which can be generated in your Grafana Web UI =&amp;gt; Configuration =&amp;gt; API Keys. You can then use it in your configuration file (eg.</description>
    </item>
    
    <item>
      <title>Cloud Configuration</title>
      <link>https://software.es.net/gdg/docs/cloud_configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/cloud_configuration/</guid>
      <description>Cloud Support Support for using a few cloud providers as a storage engine is now supported. When enabled, the local file system is only used for reading configuration files. Everything else relies on the data from the cloud provider matching up to your configuration.
Currently the following providers are supported:
AWS S3 Google Storage (GS) Azure SFTP (Not exactly cloud, but useful) NOTE: the stow was used to support all of these providers.</description>
    </item>
    
    <item>
      <title>Developer Guide</title>
      <link>https://software.es.net/gdg/docs/developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/developer/</guid>
      <description>Running Tests Bring up a grafana instance locally with default credentials of admin/admin. docker-compose up -d grafana Once the instance is up simply run go test ./... or make test Making a release Install goreleaser.
1brew install goreleaser/tap/goreleaser 2brew reinstall goreleaser` Alternatively if you have a more recent version of Go.
1go install github.com/goreleaser/goreleaser@latest export your GITHUB_TOKEN.
1export GITHUB_TOKEN=&amp;#34;secret&amp;#34; git tag v0.1.0 goreleaser release
NOTE: CI/CD pipeline should do all this automatically.</description>
    </item>
    
    <item>
      <title>Example Usage</title>
      <link>https://software.es.net/gdg/docs/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/examples/</guid>
      <description>Setup new configuration You can create new context configuration using an interactive setup.
$ ./bin/gdg ctx new mycontext Import / Download Dashboards Minimal configuration (eg. the importer.yml file) that you need to download your dashboards from your Grafana endpoint:
context_name: all contexts: all: url: https://grafana.example.org token: &amp;#34;&amp;lt;&amp;lt;Grafana API Token&amp;gt;&amp;gt;&amp;#34; # user_name: admin # password: admin output_path: exports watched: - Example - Infrastructure global: debug: true ignore_ssl_errors: false You need to adjust three parts in the configuration in order to function:</description>
    </item>
    
    <item>
      <title>Usage Guide</title>
      <link>https://software.es.net/gdg/docs/usage_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://software.es.net/gdg/docs/usage_guide/</guid>
      <description>Every namespace supporting CRUD operations has the functions: list, import, export, clear operating on only the monitored folders.
Alert Notifications Allows you to manage alertnotifications (an) if you have any setup
1./bin/gdg an list -- Lists all alert notifications 2./bin/gdg an import -- retrieve and save all alertnotifications from grafana 3./bin/gdg an export -- writes all local alert notifications to grafana 4./bin/gdg an clear -- Deletes all alert notifications Contexts Starting with version 0.</description>
    </item>
    
  </channel>
</rss>
