# This is an example .goreleaser.yml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...
builds:
  - env:
      - CGO_ENABLED=0
    binary: gdg
    ldflags: -X github.com/esnet/gdg/version.GitCommit={{ .Commit }} -X github.com/esnet/gdg/version.BuildDate={{ .Date }}  -X github.com/esnet/gdg/version.Version={{ .Tag }}
    goos:
      - linux
      - windows
      - darwin

nfpms:
  -
    id: gdg
    package_name: gdg
    file_name_template: "{{ .ConventionalFileName }}"
    homepage: https://software.es.net/gdg/
    maintainer: csgeek <samir+gdg@es.net>
    description: |-
      GDG is a tool used to manage dashboards, datasources, orgs and various entities of the Grafana application.
    license: BSD License
    formats:
      - apk
      - deb
      - rpm

    # Template to the path that the binaries should be installed.
    # Defaults to `/usr/bin`.
    bindir: /usr/bin

    # Section.
    section: default

    # Priority.
    priority: extra

    # Contents to add to the package.
    # GoReleaser will automatically add the binaries.
    contents:
      # Simple config file
      - src: conf/importer-example.yml
        dst: /etc/gdg/importer.yml
        type: config


#dockers:
#  # You can have multiple Docker images.
#  - # ID of the image, needed if you want to filter by it later on (e.g. on custom publishers).
#    goos: linux
#    goarch: amd64
#    goarm: ""
#
#    # Templates of the Docker image names.
#    image_templates:
#      - "esnet/gdg:latest"
#      - "esnet/gdg:{{ .Tag }}"
#      - "esnet/gdg:v{{ .Major }}"
#      - "gcr.io/esnet/gdg:latest"
#
#    # Skips the docker push.
#    # Could be useful if you also do draft releases.
#    #
#    # If set to auto, the release will not be pushed to the Docker repository
#    #  in case there is an indicator of a prerelease in the tag, e.g. v1.0.0-rc1.
#    #
#    # Defaults to false.
#    skip_push: true
#
#    # Path to the Dockerfile (from the project root).
#    #
#    # Defaults to `Dockerfile`.
#    dockerfile: "docker/Dockerfile-gorelease"
#
#    # Set the "backend" for the Docker pipe.
#    # Valid options are: docker, buildx, podman, buildpacks
#    # podman is a GoReleaser Pro feature and is only available on Linux.
#    # Defaults to docker.
#    use: docker
#
#    # Template of the docker build flags.
#    build_flag_templates:
#      - "--pull"
#      - "--label=org.opencontainers.image.created={{.Date}}"
#      - "--label=org.opencontainers.image.title={{.ProjectName}}"
#      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
#      - "--label=org.opencontainers.image.version={{.Version}}"
#      - "--platform=linux/arm64"
#
#    # Extra flags to be passed down to the push command.
#    # Defaults to empty.
#    push_flags:
#      - --tls-verify=false

archives:
  - replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64
    files:
      - README*
      - conf/importer-example.yml

checksum:
  name_template: "checksums.txt"
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
