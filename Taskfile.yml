version: "3"

vars:
  BIN_NAME: gdg
  VERSION : { sh: grep "const Version " internal/version/version.go | sed -E 's/.*"(.+)"$$/\1/' }
  GIT_COMMIT: { sh: git rev-parse HEAD }
  GIT_DIRTY: { sh: test -n "`git status --porcelain`" && echo "+CHANGES" || true }
  BUILD_DATE: { sh: date '+%Y-%m-%d-%H:%M:%S' }
  IMAGE_NAME: "esnet/gdg"
  LD_FLAGS: "-s -w -X github.com/esnet/gdg/internal/version.GitCommit={{ .GIT_COMMIT}}{{ .GIT_DIRTY}} -X github.com/esnet/gdg/internal/version.BuildDate={{ .BUILD_DATE }} "

dotenv: ['.env']

tasks:
  default:
    cmds:
      - task: build
  install_tools:
    desc: "Install required Dev tools by GDG"
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/client9/misspell/cmd/misspell@latest
      - go install github.com/securego/gosec/v2/cmd/gosec@master
      - go install golang.org/x/vuln/cmd/govulncheck@latest
  security:
    desc: "Run security scan"
    cmds:
      - gosec --exclude=G402,G304  ./...
  lint:
    desc: "Lint project, skipping test files."
    cmds:
      - golangci-lint run --timeout=30m --skip-dirs "(^|/)test($|/)" --skip-files "_test.go"  ./... 
  spellcheck:
    desc: "Check Spelling across code"
    cmds:
      - misspell .  | grep -v "website" 
  lint_tests:
    desc: "Lint project, including test files."
    cmds:
      - golangci-lint run ./... 
  authors:
    desc: "Building GDG"
    cmds:
      - echo "Authors\n=======\n" > AUTHORS.md
      - "git log --raw | grep \"^Author: \" | sort | uniq | cut -d ' ' -f2 | sed 's/^/- /' >> AUTHORS.md"
    silent: false
  mocks: 
    desc: "Re-generate Mocks"
    cmds:
      - mockery --dir=internal/service/ --output=internal/service/mocks --outpkg=mocks --all
  linux:
    desc: "Build linux binary"
    cmds:
      - env GOOS='linux' GOARCH='amd64' go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }}_linux cmd/gdg/main.go  
  build:
    desc: "Buiding {{ .BIN_NAME }} {{ .VERSION }}" 
    cmds:
      - echo "GOPATH=${GOPATH}"
      - go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }} cmd/gdg/main.go 
  build_generate:
    desc: "Buiding {{ .BIN_NAME }}-generate {{ .VERSION }}" 
    cmds:
      - echo "GOPATH=${GOPATH}"
      - go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }}-generate cmd/gen/main.go 
  install: 
    desc: "installing {{ .BIN_NAME }} {{ .VERSION }}" 
    cmds: 
      - echo "GOPATH=${GOPATH}"
      - go install -ldflags "{{ .LD_FLAGS}}" cmd/gdg/main.go
    silent: false
  push: 
    desc: "Pushing docker image to registry: latest {{ .VERSION }} {{ .GIT_COMMIT }}"
    deps: [tag]
    cmds:
      - docker push $(IMAGE_NAME):{{ .GIT_COMMIT }}
      - docker push $(IMAGE_NAME):{{ .VERSION }}
      - docker push $(IMAGE_NAME):latest
  clean:
    desc: "clean up data"
    cmds:
      - "test ! -e bin/{{ .BIN_NAME }} || rm bin/{{ .BIN_NAME }}" 
      - "rm -fr dist/"
  release-snapshot: 
    deps: [clean]
    desc: "Release Snapshot"
    cmds:
      - goreleaser build --snapshot
  release: 
    deps: [clean]
    desc: "Release GDG"
    cmds:
      - goreleaser release
  test:
      desc: "test check"
      cmds:
        - go test -v -coverpkg=./... -covermode=atomic -coverprofile=coverage.out  ./... 
        - go tool cover -html=coverage.out
      env:
        GRAFANA_INTEGRATION: "1"
        TEST_TOKEN_CONFIG: "0"
  test_tokens:
      desc: "test Token Based Only"
      cmds:
        - go test -v -coverpkg=./... -covermode=atomic -coverprofile=coverage.out ./...
        - go tool cover -html=coverage.out
      env:
        GRAFANA_INTEGRATION: "1"
        TEST_TOKEN_CONFIG: "1"

  vuln_check:
      desc: "Vulnerability check"
      cmds:
        - govulncheck ./...
