version: "3"

vars:
  BIN_NAME: gdg
  VERSION: { sh: grep "const Version " internal/version/version.go | sed -E 's/.*"(.+)"$$/\1/' }
  GIT_COMMIT: { sh: git rev-parse HEAD }
  GIT_DIRTY: { sh: test -n "`git status --porcelain`" && echo "+CHANGES" || true }
  BUILD_DATE: { sh: date '+%Y-%m-%d-%H:%M:%S' }
  IMAGE_NAME: "esnet/gdg"
  LD_FLAGS: "-s -w -X github.com/esnet/gdg/internal/version.GitCommit={{ .GIT_COMMIT}}{{ .GIT_DIRTY}} -X github.com/esnet/gdg/internal/version.BuildDate={{ .BUILD_DATE }} "
  TOOLS_ARG: "-modfile tools/go.mod"

dotenv: [ '.env' ]

tasks:
  default:
    cmds:
      - task: build_all
  install_tools:
    desc: "Install required Dev tools by GDG"
    cmds:
      - go tool {{ .TOOLS_ARG}} lefthook install
  security:
    desc: "Run security scan"
    cmds:
      - go tool {{ .TOOLS_ARG}} gosec --exclude=G402,G304  ./...
  format:
    desc: reformat the code to match stricter conventions
    cmds:
      - go tool {{ .TOOLS_ARG}} gofumpt -l -w .
  lint:
    desc: "Lint project, skipping test files."
    cmds:
      - go tool {{ .TOOLS_ARG}}  golangci-lint run --timeout=30m  ./...
  spellcheck:
    desc: "Check Spelling across code"
    cmds:
      - go tool {{ .TOOLS_ARG}} misspell .  | grep -v "website"
  lint_tests:
    desc: "Lint project, including test files."
    cmds:
      - go tool {{ .TOOLS_ARG}} golangci-lint run ./...
  authors:
    desc: "Building GDG"
    cmds:
      - echo "Authors\n=======\n" > AUTHORS.md
      - "git log --raw | grep \"^Author: \" | sort | uniq | cut -d ' ' -f2 | sed 's/^/- /' >> AUTHORS.md"
    silent: false
  mocks:
    desc: "Re-generate Mocks"
    cmds:
      - rm -fr internal/service/mocks
      - go tool {{ .TOOLS_ARG}} mockery
  linux:
    desc: "Build linux binary"
    cmds:
      - env GOOS='linux' GOARCH='amd64' go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }}_linux cmd/gdg/main.go
  build_all:
    desc: "Buiding All binaries"
    cmds:
      - task: build
      - task: build_generate
  build:
    desc: "Buiding {{ .BIN_NAME }} {{ .VERSION }}"
    cmds:
      - echo "GOPATH=${GOPATH}"
      - go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }} cmd/gdg/main.go
  build_generate:
    desc: "Buiding {{ .BIN_NAME }}-generate {{ .VERSION }}"
    cmds:
      - echo "GOPATH=${GOPATH}"
      - go build -ldflags "{{ .LD_FLAGS }}" -o bin/{{ .BIN_NAME }}-generate cmd/gdg-generate/main.go
  install:
    desc: "installing {{ .BIN_NAME }} {{ .VERSION }}"
    cmds:
      - echo "GOPATH=${GOPATH}"
      - go install -ldflags "{{ .LD_FLAGS}}" cmd/gdg/main.go
    silent: false
  push:
    desc: "Pushing docker image to registry: latest {{ .VERSION }} {{ .GIT_COMMIT }}"
    deps: [ tag ]
    cmds:
      - docker push $(IMAGE_NAME):{{ .GIT_COMMIT }}
      - docker push $(IMAGE_NAME):{{ .VERSION }}
      - docker push $(IMAGE_NAME):latest
  clean:
    desc: "clean up data"
    cmds:
      - "test ! -e bin/{{ .BIN_NAME }} || rm bin/{{ .BIN_NAME }}"
      - "rm -fr dist/"
  release-snapshot:
    deps: [ clean ]
    desc: "Release Snapshot"
    cmds:
      - go tool {{ .TOOLS_ARG}} goreleaser build --snapshot
  release:
    deps: [ clean ]
    desc: "TEST Release of GDG, no validation, no publish"
    cmds:
      - go tool {{ .TOOLS_ARG}}  goreleaser release --skip=publish,validate
  pipeline_test:
    desc: "Run test as close to the CICD pipiline as possible"
    cmds:
      - go tool {{ .TOOLS_ARG}} gotestsum --format testname  -- -covermode=atomic -coverpkg=$(go list ./... | egrep -v "mocks" | tr '\n' ',' )   ./...


  test:
    desc: "test check"
    cmds:
      - go test -v -coverpkg=./... -covermode=atomic -coverprofile=coverage.out  ./...
      - go tool cover -html=coverage.out
    env:
      TEST_TOKEN_CONFIG: "0"
  test_tokens:
    desc: "test Token Based Only"
    cmds:
      - go test -v -coverpkg=./... -covermode=atomic -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out
    env:
      TEST_TOKEN_CONFIG: "1"

  vuln_check:
    desc: "Vulnerability check"
    cmds:
      - go tool {{ .TOOLS_ARG}} govulncheck ./...
